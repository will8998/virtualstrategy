{"version":3,"sources":["turbopack:///[project]/node_modules/idb-keyval/dist/index.js"],"sourcesContent":["function promisifyRequest(request) {\n    return new Promise((resolve, reject) => {\n        // @ts-ignore - file size hacks\n        request.oncomplete = request.onsuccess = () => resolve(request.result);\n        // @ts-ignore - file size hacks\n        request.onabort = request.onerror = () => reject(request.error);\n    });\n}\nfunction createStore(dbName, storeName) {\n    const request = indexedDB.open(dbName);\n    request.onupgradeneeded = () => request.result.createObjectStore(storeName);\n    const dbp = promisifyRequest(request);\n    return (txMode, callback) => dbp.then((db) => callback(db.transaction(storeName, txMode).objectStore(storeName)));\n}\nlet defaultGetStoreFunc;\nfunction defaultGetStore() {\n    if (!defaultGetStoreFunc) {\n        defaultGetStoreFunc = createStore('keyval-store', 'keyval');\n    }\n    return defaultGetStoreFunc;\n}\n/**\n * Get a value by its key.\n *\n * @param key\n * @param customStore Method to get a custom store. Use with caution (see the docs).\n */\nfunction get(key, customStore = defaultGetStore()) {\n    return customStore('readonly', (store) => promisifyRequest(store.get(key)));\n}\n/**\n * Set a value with a key.\n *\n * @param key\n * @param value\n * @param customStore Method to get a custom store. Use with caution (see the docs).\n */\nfunction set(key, value, customStore = defaultGetStore()) {\n    return customStore('readwrite', (store) => {\n        store.put(value, key);\n        return promisifyRequest(store.transaction);\n    });\n}\n/**\n * Set multiple values at once. This is faster than calling set() multiple times.\n * It's also atomic â€“ if one of the pairs can't be added, none will be added.\n *\n * @param entries Array of entries, where each entry is an array of `[key, value]`.\n * @param customStore Method to get a custom store. Use with caution (see the docs).\n */\nfunction setMany(entries, customStore = defaultGetStore()) {\n    return customStore('readwrite', (store) => {\n        entries.forEach((entry) => store.put(entry[1], entry[0]));\n        return promisifyRequest(store.transaction);\n    });\n}\n/**\n * Get multiple values by their keys\n *\n * @param keys\n * @param customStore Method to get a custom store. Use with caution (see the docs).\n */\nfunction getMany(keys, customStore = defaultGetStore()) {\n    return customStore('readonly', (store) => Promise.all(keys.map((key) => promisifyRequest(store.get(key)))));\n}\n/**\n * Update a value. This lets you see the old value and update it as an atomic operation.\n *\n * @param key\n * @param updater A callback that takes the old value and returns a new value.\n * @param customStore Method to get a custom store. Use with caution (see the docs).\n */\nfunction update(key, updater, customStore = defaultGetStore()) {\n    return customStore('readwrite', (store) => \n    // Need to create the promise manually.\n    // If I try to chain promises, the transaction closes in browsers\n    // that use a promise polyfill (IE10/11).\n    new Promise((resolve, reject) => {\n        store.get(key).onsuccess = function () {\n            try {\n                store.put(updater(this.result), key);\n                resolve(promisifyRequest(store.transaction));\n            }\n            catch (err) {\n                reject(err);\n            }\n        };\n    }));\n}\n/**\n * Delete a particular key from the store.\n *\n * @param key\n * @param customStore Method to get a custom store. Use with caution (see the docs).\n */\nfunction del(key, customStore = defaultGetStore()) {\n    return customStore('readwrite', (store) => {\n        store.delete(key);\n        return promisifyRequest(store.transaction);\n    });\n}\n/**\n * Delete multiple keys at once.\n *\n * @param keys List of keys to delete.\n * @param customStore Method to get a custom store. Use with caution (see the docs).\n */\nfunction delMany(keys, customStore = defaultGetStore()) {\n    return customStore('readwrite', (store) => {\n        keys.forEach((key) => store.delete(key));\n        return promisifyRequest(store.transaction);\n    });\n}\n/**\n * Clear all values in the store.\n *\n * @param customStore Method to get a custom store. Use with caution (see the docs).\n */\nfunction clear(customStore = defaultGetStore()) {\n    return customStore('readwrite', (store) => {\n        store.clear();\n        return promisifyRequest(store.transaction);\n    });\n}\nfunction eachCursor(store, callback) {\n    store.openCursor().onsuccess = function () {\n        if (!this.result)\n            return;\n        callback(this.result);\n        this.result.continue();\n    };\n    return promisifyRequest(store.transaction);\n}\n/**\n * Get all keys in the store.\n *\n * @param customStore Method to get a custom store. Use with caution (see the docs).\n */\nfunction keys(customStore = defaultGetStore()) {\n    return customStore('readonly', (store) => {\n        // Fast path for modern browsers\n        if (store.getAllKeys) {\n            return promisifyRequest(store.getAllKeys());\n        }\n        const items = [];\n        return eachCursor(store, (cursor) => items.push(cursor.key)).then(() => items);\n    });\n}\n/**\n * Get all values in the store.\n *\n * @param customStore Method to get a custom store. Use with caution (see the docs).\n */\nfunction values(customStore = defaultGetStore()) {\n    return customStore('readonly', (store) => {\n        // Fast path for modern browsers\n        if (store.getAll) {\n            return promisifyRequest(store.getAll());\n        }\n        const items = [];\n        return eachCursor(store, (cursor) => items.push(cursor.value)).then(() => items);\n    });\n}\n/**\n * Get all entries in the store. Each entry is an array of `[key, value]`.\n *\n * @param customStore Method to get a custom store. Use with caution (see the docs).\n */\nfunction entries(customStore = defaultGetStore()) {\n    return customStore('readonly', (store) => {\n        // Fast path for modern browsers\n        // (although, hopefully we'll get a simpler path some day)\n        if (store.getAll && store.getAllKeys) {\n            return Promise.all([\n                promisifyRequest(store.getAllKeys()),\n                promisifyRequest(store.getAll()),\n            ]).then(([keys, values]) => keys.map((key, i) => [key, values[i]]));\n        }\n        const items = [];\n        return customStore('readonly', (store) => eachCursor(store, (cursor) => items.push([cursor.key, cursor.value])).then(() => items));\n    });\n}\n\nexport { clear, createStore, del, delMany, entries, get, getMany, keys, promisifyRequest, set, setMany, update, values };\n"],"names":[],"mappings":"4CAcI,EAdJ,SAAS,EAAiB,CAAO,EAC7B,OAAO,IAAI,QAAQ,CAAC,EAAS,KAEzB,EAAQ,UAAU,CAAG,EAAQ,SAAS,CAAG,IAAM,EAAQ,EAAQ,MAAM,EAErE,EAAQ,OAAO,CAAG,EAAQ,OAAO,CAAG,IAAM,EAAO,EAAQ,KAAK,CAClE,EACJ,CACA,SAAS,EAAY,CAAM,CAAE,CAAS,EAClC,IAAM,EAAU,UAAU,IAAI,CAAC,GAC/B,EAAQ,eAAe,CAAG,IAAM,EAAQ,MAAM,CAAC,iBAAiB,CAAC,GACjE,IAAM,EAAM,EAAiB,GAC7B,MAAO,CAAC,EAAQ,IAAa,EAAI,IAAI,CAAC,AAAC,GAAO,EAAS,EAAG,WAAW,CAAC,EAAW,GAAQ,WAAW,CAAC,IACzG,CAEA,SAAS,IAIL,OAHI,AAAC,IACD,EAAsB,EAAY,aADZ,EAC4B,SAAA,EAE/C,CACX,CAOA,SAAS,EAAI,CAAG,CAAE,EAAc,GAAiB,EAC7C,OAAO,EAAY,WAAY,AAAC,GAAU,EAAiB,EAAM,GAAG,CAAC,IACzE,CAQA,SAAS,EAAI,CAAG,CAAE,CAAK,CAAE,EAAc,GAAiB,EACpD,OAAO,EAAY,YAAa,AAAC,IAC7B,EAAM,GAAG,CAAC,EAAO,GACV,EAAiB,EAAM,WAAW,GAEjD,CAqDA,SAAS,EAAI,CAAG,CAAE,EAAc,GAAiB,EAC7C,OAAO,EAAY,YAAa,AAAC,IAC7B,EAAM,MAAM,CAAC,GACN,EAAiB,EAAM,WAAW,GAEjD,CAkBA,SAAS,EAAM,EAAc,GAAiB,EAC1C,OAAO,EAAY,YAAa,AAAC,IAC7B,EAAM,KAAK,GACJ,EAAiB,EAAM,WAAW,GAEjD,CAeA,SAAS,EAAK,EAAc,GAAiB,EACzC,OAAO,EAAY,WAAY,AAAC,UAE5B,GAAI,EAAM,UAAU,CAChB,CADkB,MACX,EAAiB,EAAM,UAAU,IAE5C,IAAM,EAAQ,EAAE,CAChB,MAAO,CArBY,EAqBM,AAAC,GAAW,EAAM,CArBhB,GAqBoB,CAAC,EAAO,GAAG,EApB9D,EAAM,UAAU,GAAG,SAAS,CAAG,WACtB,IAAI,CAAC,MAAM,EACZ,CACJ,EAAS,IAAI,CAAC,MAAM,EACpB,IAAI,CAAC,MAAM,CAAC,QAAQ,GACxB,EACO,EAce,AAdE,EAAM,WAAW,GAcwB,IAAI,CAAC,IAAM,EAC5E,EACJ,qM,E,E,C,C,Q,E,C,C,C,C,Q,E,C,C,C,C,Q,E,C,C,C,C,Q,K,U,E,C,C,C,E,G,C,O,C,C,C,E,I,A,G,S,C,O,C,C,C,E,G,C,E,E,C,G,A,I,E,oB,C,C,Q,C,oC,C,C,C,A,I,E,C,E,E,A,Y,A,E,G,E,C,E,C,A,C,C,A,A,G,C,C,Q,A,E,K,A,E,I,E,C,E,A,C,O,A,C,E,Q,A,C,A,C,E,E,Y,A,E,E,Q,A,C,C,A,C,C,E,A,C,C,C,O,C,E,A,Q,O,E,E,O,C,Q,O,C,E,C,A,E,K,K,I,E,K,E,G,C,C,O,C,E,C,G,C,E,E,E,M,C,E,E,S,A,E,E,E,E,Q,C,Y,C,C,C,E,C,C,C,I,I,E,K,A,E,C,A,E,C,I,C,K,C,C,E,E,S,A,E,E,E,E,iB,C,qB,C,C,C,O,C,E,K,E,C,Q,C,S,C,C,C,C,A,M,E,I,G,K,E,E,C,E,E,c,A,E,E,M,C,C,E,K,G,C,C,E,E,K,G,C,C,C,A,C,C,W,C,mD,U,E,I,C,E,E,C,G,A,E,O,C,C,A,C,A,C,I,C,C,G,E,M,qB,E,E,C,C,E,M,C,C,C,C,I,C,C,E,M,U,G,O,K,C,Q,C,I,C,S,0D,A,I,C,M,C,C,C,C,G,C,yD,I,E,C,C,C,A,C,K,C,E,E,C,C,C,A,C,C,E,A,C,G,E,A,C,C,C,A,C,Q,G,A,G,A,G,E,C,A,A,C,U,C,C,G,A,E,E,A,I,E,C,E,C,E,A,I,E,C,E,A,E,Y,A,E,E,C,G,C,C,I,A,K,Q,E,gB,C,C,C,C,C,A,C,C,C,C,A,A,C,M,I,E,yB,C,E,G,O,E,G,C,C,C,A,A,C,A,2D,I,E,C,A,C,C,A,C,A,M,E,C,C,O,A,E,A,O,C,Q,Q,C,C,E,G,C,E,G,G,I,E,kB,C,C,C,C,I,E,E,C,A,K,C,I,E,kB,C,O,K,Y,C,C,C,A,C,A,U,qF,E,C,A,A,A,C,A,A,C,A,A,A,A,C,G,E,G,A,C,C,A,C,A,A,A,C,A,C,A,A,A,C,E,G,A,A,C,C,A,C,A,C,A,C,A,A,A,A,A,C,C,A,A,A,A,C,C,E,C,C,G,C,C,E,A,E,A,E,C,C,C,G,A,C,E,C,G,I,C,C,2R,E,C,A,C,C,A,A,C,Q,C,C,A,C,A,C,C,A,A,C,E,C,C,A,A,C,A,C,E,A,C,C,A,E,A,A,C,C,A,E,A,E,I,A,E,E,C,C,Q,E,E,C,C,oC,I,E,I,E,M,C,G,C,C,A,G,Y,C,C,C,C,C,C,e,E,O,O,E,E,C,C,G,Y,C,C,K,a,C,O,C,C,K,C,C,I,C,U,C,C,kB,c,C,sB,C,C,O,M,C,O,C,C,G,E,C,C,I,K,A,C,A,G,E,A,M,I,E,I,gB,C,U,uC,C,C,A,I,E,E,C,E,E,Y,E,G,I,C,A,G,C,A,C,E,E,a,A,E,G,I,E,M,C,G,M,E,E,C,C,A,C,E,C,A,E,E,C,E,E,E,E,A,G,E,C,A,K,C,C,C,C,K,A,A,C,E,E,E,yB,A,E,C,G,C,S,C,C,C,C,C,G,K,C,G,E,A,I,C,C,I,E,S,C,M,C,C,C,8D,C,C,E,G,G,O,Y,A,I,G,E,C,I,C,M,C,C,M,M,C,C,C,E,S,A,E,E,E,E,Q,C,Y,C,C,C,C,C,C,G,E,kB,A,E,C,e,O,C,C,I,I,E,E,I,C,E,C,C,Q,E,gB,C,C,E,M,C,A,E,C,G,E,wB,A,C,C,O,E,O,A,E,E,C,O,C,C,C,oB,C,sC,K,G,E,U,G,Q,mB,sC,Q,E,E,C,M,C,Q,E,C,C,A,E,E,G,C,E,G,C,A,C,A,G,C,A,M,C,A,E,I,E,I,G,C,Q,E,yB,gC,C,C,C,I,O,C,C,C,C,A,M,C,C,C,C,G,I,C,C,M,C,C,A,G,M,O,Y,A,C,C,A,G,A,C,E,C,O,kB,E,C,G,E,2B,E,I,E,8B,C,A,E,E,C,C,C,G,G,C,M,E,O,C,C,M,C,wB,C,K,C,A,C,C,E,E,C,E,Q,C,C,C,C,C,I,C,A,I,A,E,A,E,C,A,C,E,G,C,A,I,A,C,C,E,G,E,C,A,C,E,C,C,E,wB,G,A,C,C,A,I,E,Y,gB,E,C,A,E,I,C,M,A,E,G,A,C,A,E,G,C,C,I,C,C,C,G,A,E,C,C,A,C,K,E,C,A,C,A,C,C,C,G,A,C,G,A,G,O,C,C,A,I,E,K,C,C,E,E,S,A,E,E,E,E,uB,C,2B,C,C,S,O,M,E,Q,S,S,K,G,K,E,I,E,G,Q,Q,W,e,C,W,W,Q,E,G,O,E,C,E,K,O,C,U,C,C,G,E,iB,C,U,C,M,I,I,E,G,A,C,I,E,A,C,C,A,E,G,E,G,M,E,W,C,A,E,M,E,K,M,I,C,E,K,O,E,C,C,A,C,K,C,M,C,E,E,S,A,E,E,E,E,gB,C,oB,C,C,uB,E,C,A,C,A,A,G,G,I,A,G,I,G,C,M,I,E,4B,C,C,Y,C,C,wD,C,C,Q,C,yC,C,I,C,O,C,C,A,C,M,I,E,4B,C,C,Q,C,sC,C,I,C,G,I,A,C,C,A,C,A,A,M,E,C,A,A,G,G,U,E,4B,C,M,C,E,C,G,C,E,E,mB,A,E,E,C,A,G,C,S,E,K,A,C,E,K,G,I,E,C,A,C,A,A,C,I,A,E,A,E,E,C,G,a,+C,C,A,E,C,E,E,E,G,M,A,A,E,C,C,C,E,C,A,C,C,A,E,G,I,C,C,A,M,G,E,C,C,C,E,G,C,Q,E,C,C,A,I,G,c,C,O,E,E,C,G,C,uB,C,4B,E,E,a,G,C,I,C,A,C,C,M,G,O,C,C,E,E,E,C,E,C,C,A,C,C,C,S,A,E,G,I,C,A,A,C,C,A,C,C,K,C,G,C,A,I,C,E,C,C,C,A,C,C,A,G,C,C,E,E,kB,A,E,C,I,C,C,E,C,c,E,A,E,U,C,I,C,E,E,E,G,E,E,E,C,A,M,G,e,E,E,C,C,C,A,C,C,M,A,E,C,E,E,A,E,Q,C,C,C,A,C,C,E,A,C,E,E,A,C,K,C,E,K,C,A,C,E,E,G,Q,A,E,E,K,C,M,E,C,C,C,A,G,C,A,I,E,I,E,E,K,E,C,mC,C,e,O,gB,E,E,I,E,C,C,C,E,O,I,A,E,E,E,C,A,M,G,W,E,Q,E,C,E,C,A,U,C,C,C,C,C,A,G,A,C,S,O,E,M,A,C,G,C,C,C,O,C,C,A,M,E,C,C,K,C,I,A,yB,I,E,A,4B,G,E,C,C,E,E,A,oB,E,I,E,E,C,E,I,C,W,G,Q,C,I,kC,E,G,I,C,W,E,C,Q,C,+B,C,E,C,C,A,C,E,I,C,W,E,C,Q,C,+C,E,E,K,C,I,I,G,E,A,C,Q,C,0C,C,E,E,O,C,C,U,G,Q,C,C,0B,E,I,G,C,W,E,C,Q,C,wB,C,E,A,E,C,C,A,K,C,G,Q,E,C,Q,C,gC,C,C,A,C,A,G,G,M,C,I,C,C,C,G,I,C,A,G,C,A,C,C,I,E,E,A,C,C,A,C,I,E,C,C,mF,A,C,M,I,E,qC,C,I,E,S,C,E,K,I,K,E,C,G,E,G,G,C,C,C,C,I,E,K,iE,A,C,G,G,I,E,0B,C,I,E,S,C,E,C,C,G,G,C,O,I,E,C,A,I,I,I,C,E,C,A,C,C,C,C,C,C,E,E,C,E,C,A,K,E,A,K,Q,E,E,E,I,E,E,C,I,E,E,E,A,G,C,A,A,A,C,E,E,W,A,E,E,E,G,C,C,C,I,I,E,G,C,C,G,E,C,C,C,A,C,K,I,O,C,A,G,C,G,E,I,C,E,G,C,A,C,G,E,M,Q,U,C,G,C,E,E,A,C,A,C,G,C,A,C,E,A,A,C,O,E,C,I,M,E,M,C,C,C,C,C,M,C,A,I,E,E,G,C,A,G,A,C,E,C,C,E,I,E,C,E,I,E,C,E,K,C,A,G,M,C,E,C,C,E,E,M,A,E,I,K,E,W,E,E,C,C,A,C,A,C,I,C,E,C,C,G,C,C,A,C,A,A,K,C,E,E,mB,A,E,E,C,A,G,C,I,K,E,K,A,C,E,K,C,C,A,C,A,A,C,A,K,U,E,C,C,C,E,K,E,Q,E,C,E,G,C,A,C,A,Q,C,E,E,G,C,C,C,C,C,A,C,A,I,E,C,E,C,C,A,I,A,E,C,E,E,Q,A,E,E,A,C,E,C,C,E,C,C,C,A,E,C,E,C,C,Q,A,E,E,A,C,C,C,E,C,C,K,C,C,C,C,K,C,U,C,C,A,E,M,A,O,C,G,C,E,G,C,A,A,G,C,A,C,C,I,C,C,C,G,E,E,A,I,G,C,C,M,C,M,qB,C,M,C,C,C,E,E,E,C,C,A,C,C,C,M,E,C,C,C,C,K,I,E,A,E,C,C,A,C,C,A,C,A,A,C,A,A,E,A,C,E,C,C,E,A,C,A,E,G,C,A,C,C,K,C,A,A,C,E,A,A,C,A,E,M,G,K,C,C,C,E,C,A,C,C,K,C,A,A,C,E,A,A,C,A,E,M,G,K,C,C,C,E,C,A,A,C,E,C,A,C,C,C,G,C,E,M,A,C,C,A,C,C,A,C,K,C,E,E,W,A,E,G,I,C,G,C,E,M,C,O,C,U,O,C,G,K,A,C,A,A,I,C,E,E,C,M,C,C,O,uB,C,I,G,C,C,C,E,C,C,E,C,O,G,C,C,C,Q,U,C,A,S,E,K,E,C,G,E,C,M,E,E,E,E,C,A,E,E,C,C,A,G,E,A,I,E,E,M,A,C,U,G,E,E,E,E,C,A,M,G,C,E,C,A,G,C,C,A,C,A,A,C,A,C,E,G,C,C,A,C,C,C,C,K,C,E,C,A,G,G,C,C,C,A,A,C,C,E,C,C,U,E,C,A,C,E,I,M,C,E,W,E,A,E,C,W,C,E,C,U,C,C,C,C,C,A,M,E,E,C,A,C,C,E,A,G,G,C,G,C,Q,E,I,I,E,C,E,E,W,A,E,Q,E,O,E,C,A,E,G,C,A,I,C,E,C,C,A,C,A,Y,C,E,E,M,C,C,G,A,E,E,K,M,C,C,C,M,C,C,E,E,W,A,E,E,K,E,C,C,O,E,e,C,E,E,G,C,C,E,C,C,C,E,I,Q,S,M,I,E,A,C,A,I,wD,I,E,C,C,C,A,C,Q,A,E,A,C,C,C,A,C,E,K,C,C,A,C,C,C,A,C,E,C,A,E,G,A,E,A,C,A,C,C,A,C,E,I,E,A,E,C,C,C,A,C,A,G,E,G,E,C,A,C,C,A,C,Q,E,C,C,A,C,A,C,A,I,C,C,E,A,E,C,A,A,C,A,C,A,C,E,C,A,K,A,E,A,C,C,C,A,C,E,C,C,I,K,A,G,M,C,E,C,C,C,E,I,E,G,C,A,C,A,iB,E,E,I,O,I,Q,E,C,G,S,C,C,E,C,G,G,C,E,G,G,C,G,Q,E,C,O,K,E,C,O,A,C,C,E,C,I,C,C,C,C,E,C,C,A,C,Q,E,G,E,c,E,E,A,C,C,E,E,C,E,C,C,C,C,C,M,A,E,C,oB,C,E,G,C,A,E,A,C,C,A,S,C,S,C,C,Q,C,C,C,E,E,a,A,E,C,C,E,C,E,E,E,K,A,E,E,Q,C,O,E,C,C,C,A,G,C,A,E,E,A,E,C,E,C,C,I,A,E,K,I,C,C,G,E,A,E,A,E,A,E,U,C,G,E,C,C,A,E,A,E,A,A,C,A,E,C,C,A,G,C,A,A,E,C,C,E,I,E,C,E,E,S,A,E,K,I,C,C,G,E,I,E,C,E,E,S,A,E,E,E,E,Y,C,gB,C,C,I,C,C,A,C,C,A,G,G,S,E,C,E,I,E,C,M,I,E,iB,C,G,G,C,C,E,C,C,C,G,C,Q,E,K,C,E,A,C,C,A,G,C,E,A,G,C,E,C,G,A,E,E,C,C,C,C,E,K,C,G,C,A,E,C,C,C,C,E,C,A,E,A,E,C,C,C,C,E,I,C,G,C,A,C,A,C,A,C,A,C,O,C,E,W,E,A,E,C,C,A,A,O,C,C,C,C,A,E,C,I,E,E,C,I,K,C,G,E,A,I,K,E,C,I,C,G,E,A,C,C,E,A,E,I,C,C,A,C,C,A,C,A,C,O,C,A,E,M,C,A,C,A,A,A,K,C,A,U,E,S,C,Q,I,I,C,C,C,C,K,C,C,iD,E,E,kB,C,C,C,I,C,gC,C,C,A,C,A,C","ignoreList":[0]}