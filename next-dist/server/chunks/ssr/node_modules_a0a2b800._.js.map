{"version":3,"sources":["turbopack:///[project]/node_modules/@lit/reactive-element/src/decorators/base.ts","turbopack:///[project]/node_modules/@lit/reactive-element/src/decorators/custom-element.ts","turbopack:///[project]/node_modules/@lit/reactive-element/src/decorators/query-assigned-nodes.ts","turbopack:///[project]/node_modules/@lit/reactive-element/src/decorators/query.ts","turbopack:///[project]/node_modules/@lit/reactive-element/src/decorators/event-options.ts","turbopack:///[project]/node_modules/@lit/reactive-element/src/decorators/property.ts","turbopack:///[project]/node_modules/@lit/reactive-element/src/decorators/state.ts","turbopack:///[project]/node_modules/@lit/reactive-element/src/decorators/query-assigned-elements.ts","turbopack:///[project]/node_modules/@lit/reactive-element/src/decorators/query-all.ts","turbopack:///[project]/node_modules/@lit/reactive-element/src/decorators/query-async.ts","turbopack:///[project]/node_modules/lit-html/src/directives/if-defined.ts","../../../../src/utils/CacheUtil.ts","../../../../../src/components/wui-icon/styles.ts","../../../../../src/components/wui-text/styles.ts","turbopack:///[project]/node_modules/lit-html/src/directive-helpers.ts","turbopack:///[project]/node_modules/lit-html/src/directives/until.ts","turbopack:///[project]/node_modules/lit-html/src/directives/private-async-helpers.ts","turbopack:///[project]/node_modules/lit-html/src/async-directive.ts","turbopack:///[project]/node_modules/lit-html/src/directive.ts","turbopack:///[project]/node_modules/lit-html/src/directives/class-map.ts","../../../../../src/components/wui-icon/index.ts","../../../../../src/components/wui-text/index.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\n/**\n * Generates a public interface type that removes private and protected fields.\n * This allows accepting otherwise incompatible versions of the type (e.g. from\n * multiple copies of the same package in `node_modules`).\n */\nexport type Interface<T> = {\n  [K in keyof T]: T[K];\n};\n\nexport type Constructor<T> = {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  new (...args: any[]): T;\n};\n\n/**\n * Wraps up a few best practices when returning a property descriptor from a\n * decorator.\n *\n * Marks the defined property as configurable, and enumerable, and handles\n * the case where we have a busted Reflect.decorate zombiefill (e.g. in Angular\n * apps).\n *\n * @internal\n */\nexport const desc = (\n  obj: object,\n  name: PropertyKey | ClassAccessorDecoratorContext<unknown, unknown>,\n  descriptor: PropertyDescriptor\n) => {\n  // For backwards compatibility, we keep them configurable and enumerable.\n  descriptor.configurable = true;\n  descriptor.enumerable = true;\n  if (\n    // We check for Reflect.decorate each time, in case the zombiefill\n    // is applied via lazy loading some Angular code.\n    (Reflect as typeof Reflect & {decorate?: unknown}).decorate &&\n    typeof name !== 'object'\n  ) {\n    // If we're called as a legacy decorator, and Reflect.decorate is present\n    // then we have no guarantees that the returned descriptor will be\n    // defined on the class, so we must apply it directly ourselves.\n\n    Object.defineProperty(obj, name, descriptor);\n  }\n  return descriptor;\n};\n","/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\n/*\n * IMPORTANT: For compatibility with tsickle and the Closure JS compiler, all\n * property decorators (but not class decorators) in this file that have\n * an @ExportDecoratedItems annotation must be defined as a regular function,\n * not an arrow function.\n */\n\nimport type {Constructor} from './base.js';\n\n/**\n * Allow for custom element classes with private constructors\n */\ntype CustomElementClass = Omit<typeof HTMLElement, 'new'>;\n\nexport type CustomElementDecorator = {\n  // legacy\n  (cls: CustomElementClass): void;\n\n  // standard\n  (\n    target: CustomElementClass,\n    context: ClassDecoratorContext<Constructor<HTMLElement>>\n  ): void;\n};\n\n/**\n * Class decorator factory that defines the decorated class as a custom element.\n *\n * ```js\n * @customElement('my-element')\n * class MyElement extends LitElement {\n *   render() {\n *     return html``;\n *   }\n * }\n * ```\n * @category Decorator\n * @param tagName The tag name of the custom element to define.\n */\nexport const customElement =\n  (tagName: string): CustomElementDecorator =>\n  (\n    classOrTarget: CustomElementClass | Constructor<HTMLElement>,\n    context?: ClassDecoratorContext<Constructor<HTMLElement>>\n  ) => {\n    if (context !== undefined) {\n      context.addInitializer(() => {\n        customElements.define(\n          tagName,\n          classOrTarget as CustomElementConstructor\n        );\n      });\n    } else {\n      customElements.define(tagName, classOrTarget as CustomElementConstructor);\n    }\n  };\n","/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\n/*\n * IMPORTANT: For compatibility with tsickle and the Closure JS compiler, all\n * property decorators (but not class decorators) in this file that have\n * an @ExportDecoratedItems annotation must be defined as a regular function,\n * not an arrow function.\n */\nimport type {ReactiveElement} from '../reactive-element.js';\nimport {desc, type Interface} from './base.js';\n\n/**\n * Options for the {@linkcode queryAssignedNodes} decorator. Extends the options\n * that can be passed into [HTMLSlotElement.assignedNodes](https://developer.mozilla.org/en-US/docs/Web/API/HTMLSlotElement/assignedNodes).\n */\nexport interface QueryAssignedNodesOptions extends AssignedNodesOptions {\n  /**\n   * Name of the slot to query. Leave empty for the default slot.\n   */\n  slot?: string;\n}\n\nexport type QueryAssignedNodesDecorator = {\n  // legacy\n  (\n    proto: Interface<ReactiveElement>,\n    name: PropertyKey,\n    descriptor?: PropertyDescriptor\n    // Note TypeScript requires the return type to be `void|any`\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  ): void | any;\n\n  // standard\n  <C extends Interface<ReactiveElement>, V extends Array<Node>>(\n    value: ClassAccessorDecoratorTarget<C, V>,\n    context: ClassAccessorDecoratorContext<C, V>\n  ): ClassAccessorDecoratorResult<C, V>;\n};\n\n/**\n * A property decorator that converts a class property into a getter that\n * returns the `assignedNodes` of the given `slot`.\n *\n * Can be passed an optional {@linkcode QueryAssignedNodesOptions} object.\n *\n * Example usage:\n * ```ts\n * class MyElement {\n *   @queryAssignedNodes({slot: 'list', flatten: true})\n *   listItems!: Array<Node>;\n *\n *   render() {\n *     return html`\n *       <slot name=\"list\"></slot>\n *     `;\n *   }\n * }\n * ```\n *\n * Note the type of this property should be annotated as `Array<Node>`. Use the\n * queryAssignedElements decorator to list only elements, and optionally filter\n * the element list using a CSS selector.\n *\n * @category Decorator\n */\nexport function queryAssignedNodes(\n  options?: QueryAssignedNodesOptions\n): QueryAssignedNodesDecorator {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  return (<V extends Array<Node>>(\n    obj: object,\n    name: PropertyKey | ClassAccessorDecoratorContext<unknown, unknown>\n  ) => {\n    const {slot} = options ?? {};\n    const slotSelector = `slot${slot ? `[name=${slot}]` : ':not([name])'}`;\n    return desc(obj, name, {\n      get(this: ReactiveElement): V {\n        const slotEl =\n          this.renderRoot?.querySelector<HTMLSlotElement>(slotSelector);\n        return (slotEl?.assignedNodes(options) ?? []) as unknown as V;\n      },\n    });\n  }) as QueryAssignedNodesDecorator;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\n/*\n * IMPORTANT: For compatibility with tsickle and the Closure JS compiler, all\n * property decorators (but not class decorators) in this file that have\n * an @ExportDecoratedItems annotation must be defined as a regular function,\n * not an arrow function.\n */\nimport type {ReactiveElement} from '../reactive-element.js';\nimport {desc, type Interface} from './base.js';\n\nconst DEV_MODE = true;\n\nlet issueWarning: (code: string, warning: string) => void;\n\nif (DEV_MODE) {\n  // Ensure warnings are issued only 1x, even if multiple versions of Lit\n  // are loaded.\n  globalThis.litIssuedWarnings ??= new Set();\n\n  /**\n   * Issue a warning if we haven't already, based either on `code` or `warning`.\n   * Warnings are disabled automatically only by `warning`; disabling via `code`\n   * can be done by users.\n   */\n  issueWarning = (code: string, warning: string) => {\n    warning += code\n      ? ` See https://lit.dev/msg/${code} for more information.`\n      : '';\n    if (\n      !globalThis.litIssuedWarnings!.has(warning) &&\n      !globalThis.litIssuedWarnings!.has(code)\n    ) {\n      console.warn(warning);\n      globalThis.litIssuedWarnings!.add(warning);\n    }\n  };\n}\n\nexport type QueryDecorator = {\n  // legacy\n  (\n    proto: Interface<ReactiveElement>,\n    name: PropertyKey,\n    descriptor?: PropertyDescriptor\n    // Note TypeScript requires the return type to be `void|any`\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  ): void | any;\n\n  // standard\n  <C extends Interface<ReactiveElement>, V extends Element | null>(\n    value: ClassAccessorDecoratorTarget<C, V>,\n    context: ClassAccessorDecoratorContext<C, V>\n  ): ClassAccessorDecoratorResult<C, V>;\n};\n\n/**\n * A property decorator that converts a class property into a getter that\n * executes a querySelector on the element's renderRoot.\n *\n * @param selector A DOMString containing one or more selectors to match.\n * @param cache An optional boolean which when true performs the DOM query only\n *     once and caches the result.\n *\n * See: https://developer.mozilla.org/en-US/docs/Web/API/Document/querySelector\n *\n * ```ts\n * class MyElement {\n *   @query('#first')\n *   first: HTMLDivElement;\n *\n *   render() {\n *     return html`\n *       <div id=\"first\"></div>\n *       <div id=\"second\"></div>\n *     `;\n *   }\n * }\n * ```\n * @category Decorator\n */\nexport function query(selector: string, cache?: boolean): QueryDecorator {\n  return (<C extends Interface<ReactiveElement>, V extends Element | null>(\n    protoOrTarget: ClassAccessorDecoratorTarget<C, V>,\n    nameOrContext: PropertyKey | ClassAccessorDecoratorContext<C, V>,\n    descriptor?: PropertyDescriptor\n  ) => {\n    const doQuery = (el: Interface<ReactiveElement>): V => {\n      const result = (el.renderRoot?.querySelector(selector) ?? null) as V;\n      if (DEV_MODE && result === null && cache && !el.hasUpdated) {\n        const name =\n          typeof nameOrContext === 'object'\n            ? nameOrContext.name\n            : nameOrContext;\n        issueWarning(\n          '',\n          `@query'd field ${JSON.stringify(String(name))} with the 'cache' ` +\n            `flag set for selector '${selector}' has been accessed before ` +\n            `the first update and returned null. This is expected if the ` +\n            `renderRoot tree has not been provided beforehand (e.g. via ` +\n            `Declarative Shadow DOM). Therefore the value hasn't been cached.`\n        );\n      }\n      // TODO: if we want to allow users to assert that the query will never\n      // return null, we need a new option and to throw here if the result\n      // is null.\n      return result;\n    };\n    if (cache) {\n      // Accessors to wrap from either:\n      //   1. The decorator target, in the case of standard decorators\n      //   2. The property descriptor, in the case of experimental decorators\n      //      on auto-accessors.\n      //   3. Functions that access our own cache-key property on the instance,\n      //      in the case of experimental decorators on fields.\n      const {get, set} =\n        typeof nameOrContext === 'object'\n          ? protoOrTarget\n          : descriptor ??\n            (() => {\n              const key = DEV_MODE\n                ? Symbol(`${String(nameOrContext)} (@query() cache)`)\n                : Symbol();\n              type WithCache = ReactiveElement & {\n                [key: symbol]: Element | null;\n              };\n              return {\n                get() {\n                  return (this as WithCache)[key];\n                },\n                set(v) {\n                  (this as WithCache)[key] = v;\n                },\n              };\n            })();\n      return desc(protoOrTarget, nameOrContext, {\n        get(this: ReactiveElement): V {\n          let result: V = get!.call(this);\n          if (result === undefined) {\n            result = doQuery(this);\n            if (result !== null || this.hasUpdated) {\n              set!.call(this, result);\n            }\n          }\n          return result;\n        },\n      });\n    } else {\n      // This object works as the return type for both standard and\n      // experimental decorators.\n      return desc(protoOrTarget, nameOrContext, {\n        get(this: ReactiveElement) {\n          return doQuery(this);\n        },\n      });\n    }\n  }) as QueryDecorator;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\n/*\n * IMPORTANT: For compatibility with tsickle and the Closure JS compiler, all\n * property decorators (but not class decorators) in this file that have\n * an @ExportDecoratedItems annotation must be defined as a regular function,\n * not an arrow function.\n */\n\nimport type {ReactiveElement} from '../reactive-element.js';\nimport type {Interface} from './base.js';\n\nexport type EventOptionsDecorator = {\n  // legacy\n  (\n    proto: Interface<ReactiveElement>,\n    name: PropertyKey\n    // Note TypeScript requires the return type to be `void|any`\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  ): void | any;\n\n  // standard\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  <C, V extends (this: C, ...args: any) => any>(\n    value: V,\n    _context: ClassMethodDecoratorContext<C, V>\n  ): void;\n};\n\n/**\n * Adds event listener options to a method used as an event listener in a\n * lit-html template.\n *\n * @param options An object that specifies event listener options as accepted by\n * `EventTarget#addEventListener` and `EventTarget#removeEventListener`.\n *\n * Current browsers support the `capture`, `passive`, and `once` options. See:\n * https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener#Parameters\n *\n * ```ts\n * class MyElement {\n *   clicked = false;\n *\n *   render() {\n *     return html`\n *       <div @click=${this._onClick}>\n *         <button></button>\n *       </div>\n *     `;\n *   }\n *\n *   @eventOptions({capture: true})\n *   _onClick(e) {\n *     this.clicked = true;\n *   }\n * }\n * ```\n * @category Decorator\n */\nexport function eventOptions(\n  options: AddEventListenerOptions\n): EventOptionsDecorator {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  return (<C, V extends (this: C, ...args: any) => any>(\n    protoOrValue: V,\n    nameOrContext: PropertyKey | ClassMethodDecoratorContext<C, V>\n  ) => {\n    const method =\n      typeof protoOrValue === 'function'\n        ? protoOrValue\n        : protoOrValue[nameOrContext as keyof ReactiveElement];\n    Object.assign(method, options);\n  }) as EventOptionsDecorator;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\n/*\n * IMPORTANT: For compatibility with tsickle and the Closure JS compiler, all\n * property decorators (but not class decorators) in this file that have\n * an @ExportDecoratedItems annotation must be defined as a regular function,\n * not an arrow function.\n */\n\nimport {\n  type PropertyDeclaration,\n  type ReactiveElement,\n  defaultConverter,\n  notEqual,\n} from '../reactive-element.js';\nimport type {Interface} from './base.js';\n\nconst DEV_MODE = true;\n\nlet issueWarning: (code: string, warning: string) => void;\n\nif (DEV_MODE) {\n  // Ensure warnings are issued only 1x, even if multiple versions of Lit\n  // are loaded.\n  globalThis.litIssuedWarnings ??= new Set();\n\n  /**\n   * Issue a warning if we haven't already, based either on `code` or `warning`.\n   * Warnings are disabled automatically only by `warning`; disabling via `code`\n   * can be done by users.\n   */\n  issueWarning = (code: string, warning: string) => {\n    warning += ` See https://lit.dev/msg/${code} for more information.`;\n    if (\n      !globalThis.litIssuedWarnings!.has(warning) &&\n      !globalThis.litIssuedWarnings!.has(code)\n    ) {\n      console.warn(warning);\n      globalThis.litIssuedWarnings!.add(warning);\n    }\n  };\n}\n\n// Overloads for property decorator so that TypeScript can infer the correct\n// return type when a decorator is used as an accessor decorator or a setter\n// decorator.\nexport type PropertyDecorator = {\n  // accessor decorator signature\n  <C extends Interface<ReactiveElement>, V>(\n    target: ClassAccessorDecoratorTarget<C, V>,\n    context: ClassAccessorDecoratorContext<C, V>\n  ): ClassAccessorDecoratorResult<C, V>;\n\n  // setter decorator signature\n  <C extends Interface<ReactiveElement>, V>(\n    target: (value: V) => void,\n    context: ClassSetterDecoratorContext<C, V>\n  ): (this: C, value: V) => void;\n\n  // legacy decorator signature\n  (\n    protoOrDescriptor: Object,\n    name: PropertyKey,\n    descriptor?: PropertyDescriptor\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  ): any;\n};\n\nconst legacyProperty = (\n  options: PropertyDeclaration | undefined,\n  proto: Object,\n  name: PropertyKey\n) => {\n  const hasOwnProperty = proto.hasOwnProperty(name);\n  (proto.constructor as typeof ReactiveElement).createProperty(name, options);\n  // For accessors (which have a descriptor on the prototype) we need to\n  // return a descriptor, otherwise TypeScript overwrites the descriptor we\n  // define in createProperty() with the original descriptor. We don't do this\n  // for fields, which don't have a descriptor, because this could overwrite\n  // descriptor defined by other decorators.\n  return hasOwnProperty\n    ? Object.getOwnPropertyDescriptor(proto, name)\n    : undefined;\n};\n\n// This is duplicated from a similar variable in reactive-element.ts, but\n// actually makes sense to have this default defined with the decorator, so\n// that different decorators could have different defaults.\nconst defaultPropertyDeclaration: PropertyDeclaration = {\n  attribute: true,\n  type: String,\n  converter: defaultConverter,\n  reflect: false,\n  hasChanged: notEqual,\n};\n\n// Temporary type, until google3 is on TypeScript 5.2\ntype StandardPropertyContext<C, V> = (\n  | ClassAccessorDecoratorContext<C, V>\n  | ClassSetterDecoratorContext<C, V>\n) & {metadata: object};\n\n/**\n * Wraps a class accessor or setter so that `requestUpdate()` is called with the\n * property name and old value when the accessor is set.\n */\nexport const standardProperty = <C extends Interface<ReactiveElement>, V>(\n  options: PropertyDeclaration = defaultPropertyDeclaration,\n  target: ClassAccessorDecoratorTarget<C, V> | ((value: V) => void),\n  context: StandardPropertyContext<C, V>\n): ClassAccessorDecoratorResult<C, V> | ((this: C, value: V) => void) => {\n  const {kind, metadata} = context;\n\n  if (DEV_MODE && metadata == null) {\n    issueWarning(\n      'missing-class-metadata',\n      `The class ${target} is missing decorator metadata. This ` +\n        `could mean that you're using a compiler that supports decorators ` +\n        `but doesn't support decorator metadata, such as TypeScript 5.1. ` +\n        `Please update your compiler.`\n    );\n  }\n\n  // Store the property options\n  let properties = globalThis.litPropertyMetadata.get(metadata);\n  if (properties === undefined) {\n    globalThis.litPropertyMetadata.set(metadata, (properties = new Map()));\n  }\n  if (kind === 'setter') {\n    options = Object.create(options);\n    options.wrapped = true;\n  }\n  properties.set(context.name, options);\n\n  if (kind === 'accessor') {\n    // Standard decorators cannot dynamically modify the class, so we can't\n    // replace a field with accessors. The user must use the new `accessor`\n    // keyword instead.\n    const {name} = context;\n    return {\n      set(this: ReactiveElement, v: V) {\n        const oldValue = (\n          target as ClassAccessorDecoratorTarget<C, V>\n        ).get.call(this as unknown as C);\n        (target as ClassAccessorDecoratorTarget<C, V>).set.call(\n          this as unknown as C,\n          v\n        );\n        this.requestUpdate(name, oldValue, options);\n      },\n      init(this: ReactiveElement, v: V): V {\n        if (v !== undefined) {\n          this._$changeProperty(name, undefined, options, v);\n        }\n        return v;\n      },\n    } as unknown as ClassAccessorDecoratorResult<C, V>;\n  } else if (kind === 'setter') {\n    const {name} = context;\n    return function (this: ReactiveElement, value: V) {\n      const oldValue = this[name as keyof ReactiveElement];\n      (target as (value: V) => void).call(this, value);\n      this.requestUpdate(name, oldValue, options);\n    } as unknown as (this: C, value: V) => void;\n  }\n  throw new Error(`Unsupported decorator location: ${kind}`);\n};\n\n/**\n * A class field or accessor decorator which creates a reactive property that\n * reflects a corresponding attribute value. When a decorated property is set\n * the element will update and render. A {@linkcode PropertyDeclaration} may\n * optionally be supplied to configure property features.\n *\n * This decorator should only be used for public fields. As public fields,\n * properties should be considered as primarily settable by element users,\n * either via attribute or the property itself.\n *\n * Generally, properties that are changed by the element should be private or\n * protected fields and should use the {@linkcode state} decorator.\n *\n * However, sometimes element code does need to set a public property. This\n * should typically only be done in response to user interaction, and an event\n * should be fired informing the user; for example, a checkbox sets its\n * `checked` property when clicked and fires a `changed` event. Mutating public\n * properties should typically not be done for non-primitive (object or array)\n * properties. In other cases when an element needs to manage state, a private\n * property decorated via the {@linkcode state} decorator should be used. When\n * needed, state properties can be initialized via public properties to\n * facilitate complex interactions.\n *\n * ```ts\n * class MyElement {\n *   @property({ type: Boolean })\n *   clicked = false;\n * }\n * ```\n * @category Decorator\n * @ExportDecoratedItems\n */\nexport function property(options?: PropertyDeclaration): PropertyDecorator {\n  return <C extends Interface<ReactiveElement>, V>(\n    protoOrTarget:\n      | object\n      | ClassAccessorDecoratorTarget<C, V>\n      | ((value: V) => void),\n    nameOrContext:\n      | PropertyKey\n      | ClassAccessorDecoratorContext<C, V>\n      | ClassSetterDecoratorContext<C, V>\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  ): any => {\n    return (\n      typeof nameOrContext === 'object'\n        ? standardProperty<C, V>(\n            options,\n            protoOrTarget as\n              | ClassAccessorDecoratorTarget<C, V>\n              | ((value: V) => void),\n            nameOrContext as StandardPropertyContext<C, V>\n          )\n        : legacyProperty(\n            options,\n            protoOrTarget as Object,\n            nameOrContext as PropertyKey\n          )\n    ) as PropertyDecorator;\n  };\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\n/*\n * IMPORTANT: For compatibility with tsickle and the Closure JS compiler, all\n * property decorators (but not class decorators) in this file that have\n * an @ExportDecoratedItems annotation must be defined as a regular function,\n * not an arrow function.\n */\n\nimport {property} from './property.js';\n\nexport interface StateDeclaration<Type = unknown> {\n  /**\n   * A function that indicates if a property should be considered changed when\n   * it is set. The function should take the `newValue` and `oldValue` and\n   * return `true` if an update should be requested.\n   */\n  hasChanged?(value: Type, oldValue: Type): boolean;\n}\n\n/**\n * @deprecated use StateDeclaration\n */\nexport type InternalPropertyDeclaration<Type = unknown> =\n  StateDeclaration<Type>;\n\n/**\n * Declares a private or protected reactive property that still triggers\n * updates to the element when it changes. It does not reflect from the\n * corresponding attribute.\n *\n * Properties declared this way must not be used from HTML or HTML templating\n * systems, they're solely for properties internal to the element. These\n * properties may be renamed by optimization tools like closure compiler.\n * @category Decorator\n */\nexport function state(options?: StateDeclaration) {\n  return property({\n    ...options,\n    // Add both `state` and `attribute` because we found a third party\n    // controller that is keying off of PropertyOptions.state to determine\n    // whether a field is a private internal property or not.\n    state: true,\n    attribute: false,\n  });\n}\n","/**\n * @license\n * Copyright 2021 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\n/*\n * IMPORTANT: For compatibility with tsickle and the Closure JS compiler, all\n * property decorators (but not class decorators) in this file that have\n * an @ExportDecoratedItems annotation must be defined as a regular function,\n * not an arrow function.\n */\n\nimport type {ReactiveElement} from '../reactive-element.js';\nimport type {QueryAssignedNodesOptions} from './query-assigned-nodes.js';\nimport {desc, type Interface} from './base.js';\n\nexport type QueryAssignedElementsDecorator = {\n  // legacy\n  (\n    proto: Interface<ReactiveElement>,\n    name: PropertyKey,\n    descriptor?: PropertyDescriptor\n    // Note TypeScript requires the return type to be `void|any`\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  ): void | any;\n\n  // standard\n  <C extends Interface<ReactiveElement>, V extends Array<Element>>(\n    value: ClassAccessorDecoratorTarget<C, V>,\n    context: ClassAccessorDecoratorContext<C, V>\n  ): ClassAccessorDecoratorResult<C, V>;\n};\n\n/**\n * Options for the {@linkcode queryAssignedElements} decorator. Extends the\n * options that can be passed into\n * [HTMLSlotElement.assignedElements](https://developer.mozilla.org/en-US/docs/Web/API/HTMLSlotElement/assignedElements).\n */\nexport interface QueryAssignedElementsOptions\n  extends QueryAssignedNodesOptions {\n  /**\n   * CSS selector used to filter the elements returned. For example, a selector\n   * of `\".item\"` will only include elements with the `item` class.\n   */\n  selector?: string;\n}\n\n/**\n * A property decorator that converts a class property into a getter that\n * returns the `assignedElements` of the given `slot`. Provides a declarative\n * way to use\n * [`HTMLSlotElement.assignedElements`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLSlotElement/assignedElements).\n *\n * Can be passed an optional {@linkcode QueryAssignedElementsOptions} object.\n *\n * Example usage:\n * ```ts\n * class MyElement {\n *   @queryAssignedElements({ slot: 'list' })\n *   listItems!: Array<HTMLElement>;\n *   @queryAssignedElements()\n *   unnamedSlotEls!: Array<HTMLElement>;\n *\n *   render() {\n *     return html`\n *       <slot name=\"list\"></slot>\n *       <slot></slot>\n *     `;\n *   }\n * }\n * ```\n *\n * Note, the type of this property should be annotated as `Array<HTMLElement>`.\n *\n * @category Decorator\n */\nexport function queryAssignedElements(\n  options?: QueryAssignedElementsOptions\n): QueryAssignedElementsDecorator {\n  return (<V extends Array<Element>>(\n    obj: object,\n    name: PropertyKey | ClassAccessorDecoratorContext<unknown, unknown>\n  ) => {\n    const {slot, selector} = options ?? {};\n    const slotSelector = `slot${slot ? `[name=${slot}]` : ':not([name])'}`;\n    return desc(obj, name, {\n      get(this: ReactiveElement): V {\n        const slotEl =\n          this.renderRoot?.querySelector<HTMLSlotElement>(slotSelector);\n        const elements = slotEl?.assignedElements(options) ?? [];\n        return (\n          selector === undefined\n            ? elements\n            : elements.filter((node) => node.matches(selector))\n        ) as V;\n      },\n    });\n  }) as QueryAssignedElementsDecorator;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\n/*\n * IMPORTANT: For compatibility with tsickle and the Closure JS compiler, all\n * property decorators (but not class decorators) in this file that have\n * an @ExportDecoratedItems annotation must be defined as a regular function,\n * not an arrow function.\n */\nimport type {ReactiveElement} from '../reactive-element.js';\nimport {desc, type Interface} from './base.js';\n\nexport type QueryAllDecorator = {\n  // legacy\n  (\n    proto: Interface<ReactiveElement>,\n    name: PropertyKey,\n    descriptor?: PropertyDescriptor\n    // Note TypeScript requires the return type to be `void|any`\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  ): void | any;\n\n  // standard\n  <C extends Interface<ReactiveElement>, V extends NodeList>(\n    value: ClassAccessorDecoratorTarget<C, V>,\n    context: ClassAccessorDecoratorContext<C, V>\n  ): ClassAccessorDecoratorResult<C, V>;\n};\n\n// Shared fragment used to generate empty NodeLists when a render root is\n// undefined\nlet fragment: DocumentFragment;\n\n/**\n * A property decorator that converts a class property into a getter\n * that executes a querySelectorAll on the element's renderRoot.\n *\n * @param selector A DOMString containing one or more selectors to match.\n *\n * See:\n * https://developer.mozilla.org/en-US/docs/Web/API/Document/querySelectorAll\n *\n * ```ts\n * class MyElement {\n *   @queryAll('div')\n *   divs: NodeListOf<HTMLDivElement>;\n *\n *   render() {\n *     return html`\n *       <div id=\"first\"></div>\n *       <div id=\"second\"></div>\n *     `;\n *   }\n * }\n * ```\n * @category Decorator\n */\nexport function queryAll(selector: string): QueryAllDecorator {\n  return ((\n    obj: object,\n    name: PropertyKey | ClassAccessorDecoratorContext<unknown, unknown>\n  ) => {\n    return desc(obj, name, {\n      get(this: ReactiveElement) {\n        const container =\n          this.renderRoot ?? (fragment ??= document.createDocumentFragment());\n        return container.querySelectorAll(selector);\n      },\n    });\n  }) as QueryAllDecorator;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\n/*\n * IMPORTANT: For compatibility with tsickle and the Closure JS compiler, all\n * property decorators (but not class decorators) in this file that have\n * an @ExportDecoratedItems annotation must be defined as a regular function,\n * not an arrow function.\n */\n\nimport type {ReactiveElement} from '../reactive-element.js';\nimport {desc, type Interface} from './base.js';\n\nexport type QueryAsyncDecorator = {\n  // legacy\n  (\n    proto: Interface<ReactiveElement>,\n    name: PropertyKey,\n    descriptor?: PropertyDescriptor\n    // Note TypeScript requires the return type to be `void|any`\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  ): void | any;\n\n  // standard\n  <C extends Interface<ReactiveElement>, V extends Promise<Element | null>>(\n    value: ClassAccessorDecoratorTarget<C, V>,\n    context: ClassAccessorDecoratorContext<C, V>\n  ): ClassAccessorDecoratorResult<C, V>;\n};\n\n// Note, in the future, we may extend this decorator to support the use case\n// where the queried element may need to do work to become ready to interact\n// with (e.g. load some implementation code). If so, we might elect to\n// add a second argument defining a function that can be run to make the\n// queried element loaded/updated/ready.\n/**\n * A property decorator that converts a class property into a getter that\n * returns a promise that resolves to the result of a querySelector on the\n * element's renderRoot done after the element's `updateComplete` promise\n * resolves. When the queried property may change with element state, this\n * decorator can be used instead of requiring users to await the\n * `updateComplete` before accessing the property.\n *\n * @param selector A DOMString containing one or more selectors to match.\n *\n * See: https://developer.mozilla.org/en-US/docs/Web/API/Document/querySelector\n *\n * ```ts\n * class MyElement {\n *   @queryAsync('#first')\n *   first: Promise<HTMLDivElement>;\n *\n *   render() {\n *     return html`\n *       <div id=\"first\"></div>\n *       <div id=\"second\"></div>\n *     `;\n *   }\n * }\n *\n * // external usage\n * async doSomethingWithFirst() {\n *  (await aMyElement.first).doSomething();\n * }\n * ```\n * @category Decorator\n */\nexport function queryAsync(selector: string) {\n  return ((\n    obj: object,\n    name: PropertyKey | ClassAccessorDecoratorContext<unknown, unknown>\n  ) => {\n    return desc(obj, name, {\n      async get(this: ReactiveElement) {\n        await this.updateComplete;\n        return this.renderRoot?.querySelector(selector) ?? null;\n      },\n    });\n  }) as QueryAsyncDecorator;\n}\n","/**\n * @license\n * Copyright 2018 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\nimport {nothing} from '../lit-html.js';\n\n/**\n * For AttributeParts, sets the attribute if the value is defined and removes\n * the attribute if the value is undefined.\n *\n * For other part types, this directive is a no-op.\n */\nexport const ifDefined = <T>(value: T) => value ?? nothing;\n",null,null,null,"/**\n * @license\n * Copyright 2020 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\nimport {\n  _$LH,\n  Part,\n  DirectiveParent,\n  CompiledTemplateResult,\n  MaybeCompiledTemplateResult,\n  UncompiledTemplateResult,\n} from './lit-html.js';\nimport {\n  DirectiveResult,\n  DirectiveClass,\n  PartInfo,\n  AttributePartInfo,\n} from './directive.js';\ntype Primitive = null | undefined | boolean | number | string | symbol | bigint;\n\nconst {_ChildPart: ChildPart} = _$LH;\n\ntype ChildPart = InstanceType<typeof ChildPart>;\n\nconst ENABLE_SHADYDOM_NOPATCH = true;\n\nconst wrap =\n  ENABLE_SHADYDOM_NOPATCH &&\n  window.ShadyDOM?.inUse &&\n  window.ShadyDOM?.noPatch === true\n    ? window.ShadyDOM!.wrap\n    : (node: Node) => node;\n\n/**\n * Tests if a value is a primitive value.\n *\n * See https://tc39.github.io/ecma262/#sec-typeof-operator\n */\nexport const isPrimitive = (value: unknown): value is Primitive =>\n  value === null || (typeof value != 'object' && typeof value != 'function');\n\nexport const TemplateResultType = {\n  HTML: 1,\n  SVG: 2,\n  MATHML: 3,\n} as const;\n\nexport type TemplateResultType =\n  (typeof TemplateResultType)[keyof typeof TemplateResultType];\n\ntype IsTemplateResult = {\n  (val: unknown): val is MaybeCompiledTemplateResult;\n  <T extends TemplateResultType>(\n    val: unknown,\n    type: T\n  ): val is UncompiledTemplateResult<T>;\n};\n\n/**\n * Tests if a value is a TemplateResult or a CompiledTemplateResult.\n */\nexport const isTemplateResult: IsTemplateResult = (\n  value: unknown,\n  type?: TemplateResultType\n): value is UncompiledTemplateResult =>\n  type === undefined\n    ? // This property needs to remain unminified.\n      (value as UncompiledTemplateResult)?.['_$litType$'] !== undefined\n    : (value as UncompiledTemplateResult)?.['_$litType$'] === type;\n\n/**\n * Tests if a value is a CompiledTemplateResult.\n */\nexport const isCompiledTemplateResult = (\n  value: unknown\n): value is CompiledTemplateResult => {\n  return (value as CompiledTemplateResult)?.['_$litType$']?.h != null;\n};\n\n/**\n * Tests if a value is a DirectiveResult.\n */\nexport const isDirectiveResult = (value: unknown): value is DirectiveResult =>\n  // This property needs to remain unminified.\n  (value as DirectiveResult)?.['_$litDirective$'] !== undefined;\n\n/**\n * Retrieves the Directive class for a DirectiveResult\n */\nexport const getDirectiveClass = (value: unknown): DirectiveClass | undefined =>\n  // This property needs to remain unminified.\n  (value as DirectiveResult)?.['_$litDirective$'];\n\n/**\n * Tests whether a part has only a single-expression with no strings to\n * interpolate between.\n *\n * Only AttributePart and PropertyPart can have multiple expressions.\n * Multi-expression parts have a `strings` property and single-expression\n * parts do not.\n */\nexport const isSingleExpression = (part: PartInfo) =>\n  (part as AttributePartInfo).strings === undefined;\n\nconst createMarker = () => document.createComment('');\n\n/**\n * Inserts a ChildPart into the given container ChildPart's DOM, either at the\n * end of the container ChildPart, or before the optional `refPart`.\n *\n * This does not add the part to the containerPart's committed value. That must\n * be done by callers.\n *\n * @param containerPart Part within which to add the new ChildPart\n * @param refPart Part before which to add the new ChildPart; when omitted the\n *     part added to the end of the `containerPart`\n * @param part Part to insert, or undefined to create a new part\n */\nexport const insertPart = (\n  containerPart: ChildPart,\n  refPart?: ChildPart,\n  part?: ChildPart\n): ChildPart => {\n  const container = wrap(containerPart._$startNode).parentNode!;\n\n  const refNode =\n    refPart === undefined ? containerPart._$endNode : refPart._$startNode;\n\n  if (part === undefined) {\n    const startNode = wrap(container).insertBefore(createMarker(), refNode);\n    const endNode = wrap(container).insertBefore(createMarker(), refNode);\n    part = new ChildPart(\n      startNode,\n      endNode,\n      containerPart,\n      containerPart.options\n    );\n  } else {\n    const endNode = wrap(part._$endNode!).nextSibling;\n    const oldParent = part._$parent;\n    const parentChanged = oldParent !== containerPart;\n    if (parentChanged) {\n      part._$reparentDisconnectables?.(containerPart);\n      // Note that although `_$reparentDisconnectables` updates the part's\n      // `_$parent` reference after unlinking from its current parent, that\n      // method only exists if Disconnectables are present, so we need to\n      // unconditionally set it here\n      part._$parent = containerPart;\n      // Since the _$isConnected getter is somewhat costly, only\n      // read it once we know the subtree has directives that need\n      // to be notified\n      let newConnectionState;\n      if (\n        part._$notifyConnectionChanged !== undefined &&\n        (newConnectionState = containerPart._$isConnected) !==\n          oldParent!._$isConnected\n      ) {\n        part._$notifyConnectionChanged(newConnectionState);\n      }\n    }\n    if (endNode !== refNode || parentChanged) {\n      let start: Node | null = part._$startNode;\n      while (start !== endNode) {\n        const n: Node | null = wrap(start!).nextSibling;\n        wrap(container).insertBefore(start!, refNode);\n        start = n;\n      }\n    }\n  }\n\n  return part;\n};\n\n/**\n * Sets the value of a Part.\n *\n * Note that this should only be used to set/update the value of user-created\n * parts (i.e. those created using `insertPart`); it should not be used\n * by directives to set the value of the directive's container part. Directives\n * should return a value from `update`/`render` to update their part state.\n *\n * For directives that require setting their part value asynchronously, they\n * should extend `AsyncDirective` and call `this.setValue()`.\n *\n * @param part Part to set\n * @param value Value to set\n * @param index For `AttributePart`s, the index to set\n * @param directiveParent Used internally; should not be set by user\n */\nexport const setChildPartValue = <T extends ChildPart>(\n  part: T,\n  value: unknown,\n  directiveParent: DirectiveParent = part\n): T => {\n  part._$setValue(value, directiveParent);\n  return part;\n};\n\n// A sentinel value that can never appear as a part value except when set by\n// live(). Used to force a dirty-check to fail and cause a re-render.\nconst RESET_VALUE = {};\n\n/**\n * Sets the committed value of a ChildPart directly without triggering the\n * commit stage of the part.\n *\n * This is useful in cases where a directive needs to update the part such\n * that the next update detects a value change or not. When value is omitted,\n * the next update will be guaranteed to be detected as a change.\n *\n * @param part\n * @param value\n */\nexport const setCommittedValue = (part: Part, value: unknown = RESET_VALUE) =>\n  (part._$committedValue = value);\n\n/**\n * Returns the committed value of a ChildPart.\n *\n * The committed value is used for change detection and efficient updates of\n * the part. It can differ from the value set by the template or directive in\n * cases where the template value is transformed before being committed.\n *\n * - `TemplateResult`s are committed as a `TemplateInstance`\n * - Iterables are committed as `Array<ChildPart>`\n * - All other types are committed as the template value or value returned or\n *   set by a directive.\n *\n * @param part\n */\nexport const getCommittedValue = (part: ChildPart) => part._$committedValue;\n\n/**\n * Removes a ChildPart from the DOM, including any of its content and markers.\n *\n * Note: The only difference between this and clearPart() is that this also\n * removes the part's start node. This means that the ChildPart must own its\n * start node, ie it must be a marker node specifically for this part and not an\n * anchor from surrounding content.\n *\n * @param part The Part to remove\n */\nexport const removePart = (part: ChildPart) => {\n  part._$clear();\n  part._$startNode.remove();\n};\n\nexport const clearPart = (part: ChildPart) => {\n  part._$clear();\n};\n","/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\nimport {Part, noChange} from '../lit-html.js';\nimport {isPrimitive} from '../directive-helpers.js';\nimport {directive, AsyncDirective} from '../async-directive.js';\nimport {Pauser, PseudoWeakRef} from './private-async-helpers.js';\n\nconst isPromise = (x: unknown) => {\n  return !isPrimitive(x) && typeof (x as {then?: unknown}).then === 'function';\n};\n// Effectively infinity, but a SMI.\nconst _infinity = 0x3fffffff;\n\nexport class UntilDirective extends AsyncDirective {\n  private __lastRenderedIndex: number = _infinity;\n  private __values: unknown[] = [];\n  private __weakThis = new PseudoWeakRef(this);\n  private __pauser = new Pauser();\n\n  render(...args: Array<unknown>): unknown {\n    return args.find((x) => !isPromise(x)) ?? noChange;\n  }\n\n  override update(_part: Part, args: Array<unknown>) {\n    const previousValues = this.__values;\n    let previousLength = previousValues.length;\n    this.__values = args;\n\n    const weakThis = this.__weakThis;\n    const pauser = this.__pauser;\n\n    // If our initial render occurs while disconnected, ensure that the pauser\n    // and weakThis are in the disconnected state\n    if (!this.isConnected) {\n      this.disconnected();\n    }\n\n    for (let i = 0; i < args.length; i++) {\n      // If we've rendered a higher-priority value already, stop.\n      if (i > this.__lastRenderedIndex) {\n        break;\n      }\n\n      const value = args[i];\n\n      // Render non-Promise values immediately\n      if (!isPromise(value)) {\n        this.__lastRenderedIndex = i;\n        // Since a lower-priority value will never overwrite a higher-priority\n        // synchronous value, we can stop processing now.\n        return value;\n      }\n\n      // If this is a Promise we've already handled, skip it.\n      if (i < previousLength && value === previousValues[i]) {\n        continue;\n      }\n\n      // We have a Promise that we haven't seen before, so priorities may have\n      // changed. Forget what we rendered before.\n      this.__lastRenderedIndex = _infinity;\n      previousLength = 0;\n\n      // Note, the callback avoids closing over `this` so that the directive\n      // can be gc'ed before the promise resolves; instead `this` is retrieved\n      // from `weakThis`, which can break the hard reference in the closure when\n      // the directive disconnects\n      Promise.resolve(value).then(async (result: unknown) => {\n        // If we're disconnected, wait until we're (maybe) reconnected\n        // The while loop here handles the case that the connection state\n        // thrashes, causing the pauser to resume and then get re-paused\n        while (pauser.get()) {\n          await pauser.get();\n        }\n        // If the callback gets here and there is no `this`, it means that the\n        // directive has been disconnected and garbage collected and we don't\n        // need to do anything else\n        const _this = weakThis.deref();\n        if (_this !== undefined) {\n          const index = _this.__values.indexOf(value);\n          // If state.values doesn't contain the value, we've re-rendered without\n          // the value, so don't render it. Then, only render if the value is\n          // higher-priority than what's already been rendered.\n          if (index > -1 && index < _this.__lastRenderedIndex) {\n            _this.__lastRenderedIndex = index;\n            _this.setValue(result);\n          }\n        }\n      });\n    }\n\n    return noChange;\n  }\n\n  override disconnected() {\n    this.__weakThis.disconnect();\n    this.__pauser.pause();\n  }\n\n  override reconnected() {\n    this.__weakThis.reconnect(this);\n    this.__pauser.resume();\n  }\n}\n\n/**\n * Renders one of a series of values, including Promises, to a Part.\n *\n * Values are rendered in priority order, with the first argument having the\n * highest priority and the last argument having the lowest priority. If a\n * value is a Promise, low-priority values will be rendered until it resolves.\n *\n * The priority of values can be used to create placeholder content for async\n * data. For example, a Promise with pending content can be the first,\n * highest-priority, argument, and a non_promise loading indicator template can\n * be used as the second, lower-priority, argument. The loading indicator will\n * render immediately, and the primary content will render when the Promise\n * resolves.\n *\n * Example:\n *\n * ```js\n * const content = fetch('./content.txt').then(r => r.text());\n * html`${until(content, html`<span>Loading...</span>`)}`\n * ```\n */\nexport const until = directive(UntilDirective);\n\n/**\n * The type of the class that powers this directive. Necessary for naming the\n * directive's return type.\n */\n// export type {UntilDirective};\n","/**\n * @license\n * Copyright 2021 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\n// Note, this module is not included in package exports so that it's private to\n// our first-party directives. If it ends up being useful, we can open it up and\n// export it.\n\n/**\n * Helper to iterate an AsyncIterable in its own closure.\n * @param iterable The iterable to iterate\n * @param callback The callback to call for each value. If the callback returns\n * `false`, the loop will be broken.\n */\nexport const forAwaitOf = async <T>(\n  iterable: AsyncIterable<T>,\n  callback: (value: T) => Promise<boolean>\n) => {\n  for await (const v of iterable) {\n    if ((await callback(v)) === false) {\n      return;\n    }\n  }\n};\n\n/**\n * Holds a reference to an instance that can be disconnected and reconnected,\n * so that a closure over the ref (e.g. in a then function to a promise) does\n * not strongly hold a ref to the instance. Approximates a WeakRef but must\n * be manually connected & disconnected to the backing instance.\n */\nexport class PseudoWeakRef<T> {\n  private _ref?: T;\n  constructor(ref: T) {\n    this._ref = ref;\n  }\n  /**\n   * Disassociates the ref with the backing instance.\n   */\n  disconnect() {\n    this._ref = undefined;\n  }\n  /**\n   * Reassociates the ref with the backing instance.\n   */\n  reconnect(ref: T) {\n    this._ref = ref;\n  }\n  /**\n   * Retrieves the backing instance (will be undefined when disconnected)\n   */\n  deref() {\n    return this._ref;\n  }\n}\n\n/**\n * A helper to pause and resume waiting on a condition in an async function\n */\nexport class Pauser {\n  private _promise?: Promise<void> = undefined;\n  private _resolve?: () => void = undefined;\n  /**\n   * When paused, returns a promise to be awaited; when unpaused, returns\n   * undefined. Note that in the microtask between the pauser being resumed\n   * an await of this promise resolving, the pauser could be paused again,\n   * hence callers should check the promise in a loop when awaiting.\n   * @returns A promise to be awaited when paused or undefined\n   */\n  get() {\n    return this._promise;\n  }\n  /**\n   * Creates a promise to be awaited\n   */\n  pause() {\n    this._promise ??= new Promise((resolve) => (this._resolve = resolve));\n  }\n  /**\n   * Resolves the promise which may be awaited\n   */\n  resume() {\n    this._resolve?.();\n    this._promise = this._resolve = undefined;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\n/**\n * Overview:\n *\n * This module is designed to add support for an async `setValue` API and\n * `disconnected` callback to directives with the least impact on the core\n * runtime or payload when that feature is not used.\n *\n * The strategy is to introduce a `AsyncDirective` subclass of\n * `Directive` that climbs the \"parent\" tree in its constructor to note which\n * branches of lit-html's \"logical tree\" of data structures contain such\n * directives and thus need to be crawled when a subtree is being cleared (or\n * manually disconnected) in order to run the `disconnected` callback.\n *\n * The \"nodes\" of the logical tree include Parts, TemplateInstances (for when a\n * TemplateResult is committed to a value of a ChildPart), and Directives; these\n * all implement a common interface called `DisconnectableChild`. Each has a\n * `_$parent` reference which is set during construction in the core code, and a\n * `_$disconnectableChildren` field which is initially undefined.\n *\n * The sparse tree created by means of the `AsyncDirective` constructor\n * crawling up the `_$parent` tree and placing a `_$disconnectableChildren` Set\n * on each parent that includes each child that contains a\n * `AsyncDirective` directly or transitively via its children. In order to\n * notify connection state changes and disconnect (or reconnect) a tree, the\n * `_$notifyConnectionChanged` API is patched onto ChildParts as a directive\n * climbs the parent tree, which is called by the core when clearing a part if\n * it exists. When called, that method iterates over the sparse tree of\n * Set<DisconnectableChildren> built up by AsyncDirectives, and calls\n * `_$notifyDirectiveConnectionChanged` on any directives that are encountered\n * in that tree, running the required callbacks.\n *\n * A given \"logical tree\" of lit-html data-structures might look like this:\n *\n *  ChildPart(N1) _$dC=[D2,T3]\n *   ._directive\n *     AsyncDirective(D2)\n *   ._value // user value was TemplateResult\n *     TemplateInstance(T3) _$dC=[A4,A6,N10,N12]\n *      ._$parts[]\n *        AttributePart(A4) _$dC=[D5]\n *         ._directives[]\n *           AsyncDirective(D5)\n *        AttributePart(A6) _$dC=[D7,D8]\n *         ._directives[]\n *           AsyncDirective(D7)\n *           Directive(D8) _$dC=[D9]\n *            ._directive\n *              AsyncDirective(D9)\n *        ChildPart(N10) _$dC=[D11]\n *         ._directive\n *           AsyncDirective(D11)\n *         ._value\n *           string\n *        ChildPart(N12) _$dC=[D13,N14,N16]\n *         ._directive\n *           AsyncDirective(D13)\n *         ._value // user value was iterable\n *           Array<ChildPart>\n *             ChildPart(N14) _$dC=[D15]\n *              ._value\n *                string\n *             ChildPart(N16) _$dC=[D17,T18]\n *              ._directive\n *                AsyncDirective(D17)\n *              ._value // user value was TemplateResult\n *                TemplateInstance(T18) _$dC=[A19,A21,N25]\n *                 ._$parts[]\n *                   AttributePart(A19) _$dC=[D20]\n *                    ._directives[]\n *                      AsyncDirective(D20)\n *                   AttributePart(A21) _$dC=[22,23]\n *                    ._directives[]\n *                      AsyncDirective(D22)\n *                      Directive(D23) _$dC=[D24]\n *                       ._directive\n *                         AsyncDirective(D24)\n *                   ChildPart(N25) _$dC=[D26]\n *                    ._directive\n *                      AsyncDirective(D26)\n *                    ._value\n *                      string\n *\n * Example 1: The directive in ChildPart(N12) updates and returns `nothing`. The\n * ChildPart will _clear() itself, and so we need to disconnect the \"value\" of\n * the ChildPart (but not its directive). In this case, when `_clear()` calls\n * `_$notifyConnectionChanged()`, we don't iterate all of the\n * _$disconnectableChildren, rather we do a value-specific disconnection: i.e.\n * since the _value was an Array<ChildPart> (because an iterable had been\n * committed), we iterate the array of ChildParts (N14, N16) and run\n * `setConnected` on them (which does recurse down the full tree of\n * `_$disconnectableChildren` below it, and also removes N14 and N16 from N12's\n * `_$disconnectableChildren`). Once the values have been disconnected, we then\n * check whether the ChildPart(N12)'s list of `_$disconnectableChildren` is empty\n * (and would remove it from its parent TemplateInstance(T3) if so), but since\n * it would still contain its directive D13, it stays in the disconnectable\n * tree.\n *\n * Example 2: In the course of Example 1, `setConnected` will reach\n * ChildPart(N16); in this case the entire part is being disconnected, so we\n * simply iterate all of N16's `_$disconnectableChildren` (D17,T18) and\n * recursively run `setConnected` on them. Note that we only remove children\n * from `_$disconnectableChildren` for the top-level values being disconnected\n * on a clear; doing this bookkeeping lower in the tree is wasteful since it's\n * all being thrown away.\n *\n * Example 3: If the LitElement containing the entire tree above becomes\n * disconnected, it will run `childPart.setConnected()` (which calls\n * `childPart._$notifyConnectionChanged()` if it exists); in this case, we\n * recursively run `setConnected()` over the entire tree, without removing any\n * children from `_$disconnectableChildren`, since this tree is required to\n * re-connect the tree, which does the same operation, simply passing\n * `isConnected: true` down the tree, signaling which callback to run.\n */\n\nimport {AttributePart, ChildPart, Disconnectable, Part} from './lit-html.js';\nimport {isSingleExpression} from './directive-helpers.js';\nimport {Directive, PartInfo, PartType} from './directive.js';\nexport * from './directive.js';\n\nconst DEV_MODE = true;\n\n/**\n * Recursively walks down the tree of Parts/TemplateInstances/Directives to set\n * the connected state of directives and run `disconnected`/ `reconnected`\n * callbacks.\n *\n * @return True if there were children to disconnect; false otherwise\n */\nconst notifyChildrenConnectedChanged = (\n  parent: Disconnectable,\n  isConnected: boolean\n): boolean => {\n  const children = parent._$disconnectableChildren;\n  if (children === undefined) {\n    return false;\n  }\n  for (const obj of children) {\n    // The existence of `_$notifyDirectiveConnectionChanged` is used as a \"brand\" to\n    // disambiguate AsyncDirectives from other DisconnectableChildren\n    // (as opposed to using an instanceof check to know when to call it); the\n    // redundancy of \"Directive\" in the API name is to avoid conflicting with\n    // `_$notifyConnectionChanged`, which exists `ChildParts` which are also in\n    // this list\n    // Disconnect Directive (and any nested directives contained within)\n    // This property needs to remain unminified.\n    (obj as AsyncDirective)['_$notifyDirectiveConnectionChanged']?.(\n      isConnected,\n      false\n    );\n    // Disconnect Part/TemplateInstance\n    notifyChildrenConnectedChanged(obj, isConnected);\n  }\n  return true;\n};\n\n/**\n * Removes the given child from its parent list of disconnectable children, and\n * if the parent list becomes empty as a result, removes the parent from its\n * parent, and so forth up the tree when that causes subsequent parent lists to\n * become empty.\n */\nconst removeDisconnectableFromParent = (obj: Disconnectable) => {\n  let parent, children;\n  do {\n    if ((parent = obj._$parent) === undefined) {\n      break;\n    }\n    children = parent._$disconnectableChildren!;\n    children.delete(obj);\n    obj = parent;\n  } while (children?.size === 0);\n};\n\nconst addDisconnectableToParent = (obj: Disconnectable) => {\n  // Climb the parent tree, creating a sparse tree of children needing\n  // disconnection\n  for (let parent; (parent = obj._$parent); obj = parent) {\n    let children = parent._$disconnectableChildren;\n    if (children === undefined) {\n      parent._$disconnectableChildren = children = new Set();\n    } else if (children.has(obj)) {\n      // Once we've reached a parent that already contains this child, we\n      // can short-circuit\n      break;\n    }\n    children.add(obj);\n    installDisconnectAPI(parent);\n  }\n};\n\n/**\n * Changes the parent reference of the ChildPart, and updates the sparse tree of\n * Disconnectable children accordingly.\n *\n * Note, this method will be patched onto ChildPart instances and called from\n * the core code when parts are moved between different parents.\n */\nfunction reparentDisconnectables(this: ChildPart, newParent: Disconnectable) {\n  if (this._$disconnectableChildren !== undefined) {\n    removeDisconnectableFromParent(this);\n    this._$parent = newParent;\n    addDisconnectableToParent(this);\n  } else {\n    this._$parent = newParent;\n  }\n}\n\n/**\n * Sets the connected state on any directives contained within the committed\n * value of this part (i.e. within a TemplateInstance or iterable of\n * ChildParts) and runs their `disconnected`/`reconnected`s, as well as within\n * any directives stored on the ChildPart (when `valueOnly` is false).\n *\n * `isClearingValue` should be passed as `true` on a top-level part that is\n * clearing itself, and not as a result of recursively disconnecting directives\n * as part of a `clear` operation higher up the tree. This both ensures that any\n * directive on this ChildPart that produced a value that caused the clear\n * operation is not disconnected, and also serves as a performance optimization\n * to avoid needless bookkeeping when a subtree is going away; when clearing a\n * subtree, only the top-most part need to remove itself from the parent.\n *\n * `fromPartIndex` is passed only in the case of a partial `_clear` running as a\n * result of truncating an iterable.\n *\n * Note, this method will be patched onto ChildPart instances and called from the\n * core code when parts are cleared or the connection state is changed by the\n * user.\n */\nfunction notifyChildPartConnectedChanged(\n  this: ChildPart,\n  isConnected: boolean,\n  isClearingValue = false,\n  fromPartIndex = 0\n) {\n  const value = this._$committedValue;\n  const children = this._$disconnectableChildren;\n  if (children === undefined || children.size === 0) {\n    return;\n  }\n  if (isClearingValue) {\n    if (Array.isArray(value)) {\n      // Iterable case: Any ChildParts created by the iterable should be\n      // disconnected and removed from this ChildPart's disconnectable\n      // children (starting at `fromPartIndex` in the case of truncation)\n      for (let i = fromPartIndex; i < value.length; i++) {\n        notifyChildrenConnectedChanged(value[i], false);\n        removeDisconnectableFromParent(value[i]);\n      }\n    } else if (value != null) {\n      // TemplateInstance case: If the value has disconnectable children (will\n      // only be in the case that it is a TemplateInstance), we disconnect it\n      // and remove it from this ChildPart's disconnectable children\n      notifyChildrenConnectedChanged(value as Disconnectable, false);\n      removeDisconnectableFromParent(value as Disconnectable);\n    }\n  } else {\n    notifyChildrenConnectedChanged(this, isConnected);\n  }\n}\n\n/**\n * Patches disconnection API onto ChildParts.\n */\nconst installDisconnectAPI = (obj: Disconnectable) => {\n  if ((obj as ChildPart).type == PartType.CHILD) {\n    (obj as ChildPart)._$notifyConnectionChanged ??=\n      notifyChildPartConnectedChanged;\n    (obj as ChildPart)._$reparentDisconnectables ??= reparentDisconnectables;\n  }\n};\n\n/**\n * An abstract `Directive` base class whose `disconnected` method will be\n * called when the part containing the directive is cleared as a result of\n * re-rendering, or when the user calls `part.setConnected(false)` on\n * a part that was previously rendered containing the directive (as happens\n * when e.g. a LitElement disconnects from the DOM).\n *\n * If `part.setConnected(true)` is subsequently called on a\n * containing part, the directive's `reconnected` method will be called prior\n * to its next `update`/`render` callbacks. When implementing `disconnected`,\n * `reconnected` should also be implemented to be compatible with reconnection.\n *\n * Note that updates may occur while the directive is disconnected. As such,\n * directives should generally check the `this.isConnected` flag during\n * render/update to determine whether it is safe to subscribe to resources\n * that may prevent garbage collection.\n */\nexport abstract class AsyncDirective extends Directive {\n  // As opposed to other Disconnectables, AsyncDirectives always get notified\n  // when the RootPart connection changes, so the public `isConnected`\n  // is a locally stored variable initialized via its part's getter and synced\n  // via `_$notifyDirectiveConnectionChanged`. This is cheaper than using\n  // the _$isConnected getter, which has to look back up the tree each time.\n  /**\n   * The connection state for this Directive.\n   */\n  isConnected!: boolean;\n\n  // @internal\n  override _$disconnectableChildren?: Set<Disconnectable> = undefined;\n  /**\n   * Initialize the part with internal fields\n   * @param part\n   * @param parent\n   * @param attributeIndex\n   */\n  override _$initialize(\n    part: Part,\n    parent: Disconnectable,\n    attributeIndex: number | undefined\n  ) {\n    super._$initialize(part, parent, attributeIndex);\n    addDisconnectableToParent(this);\n    this.isConnected = part._$isConnected;\n  }\n  // This property needs to remain unminified.\n  /**\n   * Called from the core code when a directive is going away from a part (in\n   * which case `shouldRemoveFromParent` should be true), and from the\n   * `setChildrenConnected` helper function when recursively changing the\n   * connection state of a tree (in which case `shouldRemoveFromParent` should\n   * be false).\n   *\n   * @param isConnected\n   * @param isClearingDirective - True when the directive itself is being\n   *     removed; false when the tree is being disconnected\n   * @internal\n   */\n  override ['_$notifyDirectiveConnectionChanged'](\n    isConnected: boolean,\n    isClearingDirective = true\n  ) {\n    if (isConnected !== this.isConnected) {\n      this.isConnected = isConnected;\n      if (isConnected) {\n        this.reconnected?.();\n      } else {\n        this.disconnected?.();\n      }\n    }\n    if (isClearingDirective) {\n      notifyChildrenConnectedChanged(this, isConnected);\n      removeDisconnectableFromParent(this);\n    }\n  }\n\n  /**\n   * Sets the value of the directive's Part outside the normal `update`/`render`\n   * lifecycle of a directive.\n   *\n   * This method should not be called synchronously from a directive's `update`\n   * or `render`.\n   *\n   * @param directive The directive to update\n   * @param value The value to set\n   */\n  setValue(value: unknown) {\n    if (isSingleExpression(this.__part as unknown as PartInfo)) {\n      this.__part._$setValue(value, this);\n    } else {\n      // this.__attributeIndex will be defined in this case, but\n      // assert it in dev mode\n      if (DEV_MODE && this.__attributeIndex === undefined) {\n        throw new Error(`Expected this.__attributeIndex to be a number`);\n      }\n      const newValues = [...(this.__part._$committedValue as Array<unknown>)];\n      newValues[this.__attributeIndex!] = value;\n      (this.__part as AttributePart)._$setValue(newValues, this, 0);\n    }\n  }\n\n  /**\n   * User callbacks for implementing logic to release any resources/subscriptions\n   * that may have been retained by this directive. Since directives may also be\n   * re-connected, `reconnected` should also be implemented to restore the\n   * working state of the directive prior to the next render.\n   */\n  protected disconnected() {}\n  protected reconnected() {}\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\nimport {Disconnectable, Part} from './lit-html.js';\n\nexport {\n  AttributePart,\n  BooleanAttributePart,\n  ChildPart,\n  ElementPart,\n  EventPart,\n  Part,\n  PropertyPart,\n} from './lit-html.js';\n\nexport interface DirectiveClass {\n  new (part: PartInfo): Directive;\n}\n\n/**\n * This utility type extracts the signature of a directive class's render()\n * method so we can use it for the type of the generated directive function.\n */\nexport type DirectiveParameters<C extends Directive> = Parameters<C['render']>;\n\n/**\n * A generated directive function doesn't evaluate the directive, but just\n * returns a DirectiveResult object that captures the arguments.\n */\nexport interface DirectiveResult<C extends DirectiveClass = DirectiveClass> {\n  /**\n   * This property needs to remain unminified.\n   * @internal\n   */\n  ['_$litDirective$']: C;\n  /** @internal */\n  values: DirectiveParameters<InstanceType<C>>;\n}\n\nexport const PartType = {\n  ATTRIBUTE: 1,\n  CHILD: 2,\n  PROPERTY: 3,\n  BOOLEAN_ATTRIBUTE: 4,\n  EVENT: 5,\n  ELEMENT: 6,\n} as const;\n\nexport type PartType = (typeof PartType)[keyof typeof PartType];\n\nexport interface ChildPartInfo {\n  readonly type: typeof PartType.CHILD;\n}\n\nexport interface AttributePartInfo {\n  readonly type:\n    | typeof PartType.ATTRIBUTE\n    | typeof PartType.PROPERTY\n    | typeof PartType.BOOLEAN_ATTRIBUTE\n    | typeof PartType.EVENT;\n  readonly strings?: ReadonlyArray<string>;\n  readonly name: string;\n  readonly tagName: string;\n}\n\nexport interface ElementPartInfo {\n  readonly type: typeof PartType.ELEMENT;\n}\n\n/**\n * Information about the part a directive is bound to.\n *\n * This is useful for checking that a directive is attached to a valid part,\n * such as with directive that can only be used on attribute bindings.\n */\nexport type PartInfo = ChildPartInfo | AttributePartInfo | ElementPartInfo;\n\n/**\n * Creates a user-facing directive function from a Directive class. This\n * function has the same parameters as the directive's render() method.\n */\nexport const directive =\n  <C extends DirectiveClass>(c: C) =>\n  (...values: DirectiveParameters<InstanceType<C>>): DirectiveResult<C> => ({\n    // This property needs to remain unminified.\n    ['_$litDirective$']: c,\n    values,\n  });\n\n/**\n * Base class for creating custom directives. Users should extend this class,\n * implement `render` and/or `update`, and then pass their subclass to\n * `directive`.\n */\nexport abstract class Directive implements Disconnectable {\n  //@internal\n  __part!: Part;\n  //@internal\n  __attributeIndex: number | undefined;\n  //@internal\n  __directive?: Directive;\n\n  //@internal\n  _$parent!: Disconnectable;\n\n  // These will only exist on the AsyncDirective subclass\n  //@internal\n  _$disconnectableChildren?: Set<Disconnectable>;\n  // This property needs to remain unminified.\n  //@internal\n  ['_$notifyDirectiveConnectionChanged']?(isConnected: boolean): void;\n\n  constructor(_partInfo: PartInfo) {}\n\n  // See comment in Disconnectable interface for why this is a getter\n  get _$isConnected() {\n    return this._$parent._$isConnected;\n  }\n\n  /** @internal */\n  _$initialize(\n    part: Part,\n    parent: Disconnectable,\n    attributeIndex: number | undefined\n  ) {\n    this.__part = part;\n    this._$parent = parent;\n    this.__attributeIndex = attributeIndex;\n  }\n  /** @internal */\n  _$resolve(part: Part, props: Array<unknown>): unknown {\n    return this.update(part, props);\n  }\n\n  abstract render(...props: Array<unknown>): unknown;\n\n  update(_part: Part, props: Array<unknown>): unknown {\n    return this.render(...props);\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\nimport {AttributePart, noChange} from '../lit-html.js';\nimport {\n  directive,\n  Directive,\n  DirectiveParameters,\n  PartInfo,\n  PartType,\n} from '../directive.js';\n\n/**\n * A key-value set of class names to truthy values.\n */\nexport interface ClassInfo {\n  readonly [name: string]: string | boolean | number;\n}\n\nclass ClassMapDirective extends Directive {\n  /**\n   * Stores the ClassInfo object applied to a given AttributePart.\n   * Used to unset existing values when a new ClassInfo object is applied.\n   */\n  private _previousClasses?: Set<string>;\n  private _staticClasses?: Set<string>;\n\n  constructor(partInfo: PartInfo) {\n    super(partInfo);\n    if (\n      partInfo.type !== PartType.ATTRIBUTE ||\n      partInfo.name !== 'class' ||\n      (partInfo.strings?.length as number) > 2\n    ) {\n      throw new Error(\n        '`classMap()` can only be used in the `class` attribute ' +\n          'and must be the only part in the attribute.'\n      );\n    }\n  }\n\n  render(classInfo: ClassInfo) {\n    // Add spaces to ensure separation from static classes\n    return (\n      ' ' +\n      Object.keys(classInfo)\n        .filter((key) => classInfo[key])\n        .join(' ') +\n      ' '\n    );\n  }\n\n  override update(part: AttributePart, [classInfo]: DirectiveParameters<this>) {\n    // Remember dynamic classes on the first render\n    if (this._previousClasses === undefined) {\n      this._previousClasses = new Set();\n      if (part.strings !== undefined) {\n        this._staticClasses = new Set(\n          part.strings\n            .join(' ')\n            .split(/\\s/)\n            .filter((s) => s !== '')\n        );\n      }\n      for (const name in classInfo) {\n        if (classInfo[name] && !this._staticClasses?.has(name)) {\n          this._previousClasses.add(name);\n        }\n      }\n      return this.render(classInfo);\n    }\n\n    const classList = part.element.classList;\n\n    // Remove old classes that no longer apply\n    for (const name of this._previousClasses) {\n      if (!(name in classInfo)) {\n        classList.remove(name);\n        this._previousClasses!.delete(name);\n      }\n    }\n\n    // Add or remove classes based on their classMap value\n    for (const name in classInfo) {\n      // We explicitly want a loose truthy check of `value` because it seems\n      // more convenient that '' and 0 are skipped.\n      const value = !!classInfo[name];\n      if (\n        value !== this._previousClasses.has(name) &&\n        !this._staticClasses?.has(name)\n      ) {\n        if (value) {\n          classList.add(name);\n          this._previousClasses.add(name);\n        } else {\n          classList.remove(name);\n          this._previousClasses.delete(name);\n        }\n      }\n    }\n    return noChange;\n  }\n}\n\n/**\n * A directive that applies dynamic CSS classes.\n *\n * This must be used in the `class` attribute and must be the only part used in\n * the attribute. It takes each property in the `classInfo` argument and adds\n * the property name to the element's `classList` if the property value is\n * truthy; if the property value is falsy, the property name is removed from\n * the element's `class`.\n *\n * For example `{foo: bar}` applies the class `foo` if the value of `bar` is\n * truthy.\n *\n * @param classInfo\n */\nexport const classMap = directive(ClassMapDirective);\n\n/**\n * The type of the class that powers this directive. Necessary for naming the\n * directive's return type.\n */\nexport type {ClassMapDirective};\n",null,null],"names":["desc","tagName","queryAssignedNodes","descriptor","options","cache","protoOrValue","obj","type","name","state","method","slot","doQuery","el","defaultConverter","slotSelector","assign","target","Object","kind","get","defineProperty","define","set","this","renderRoot","protoOrTarget","slotEl","querySelector","key","Symbol","metadata","assignedNodes","elements","undefined","properties","globalThis","v","selector","filter","nameOrContext","node","matches","result","call","create","hasUpdated","context","oldValue","requestUpdate","init","_$changeProperty","value","Error","property","standardProperty","proto","hasOwnProperty","constructor","createProperty","getOwnPropertyDescriptor","legacyProperty","fragment","queryAsync","queryAll","updateComplete","document","querySelectorAll","ifDefined","nothing","_$LH","isPrimitive","callback","x","children","partInfo","PartType","ATTRIBUTE","ELEMENT","HTML","c","SVG","isConnected","_$litDirective$","isTemplateResult","_ref","ref","removeDisconnectableFromParent","__lastRenderedIndex","PseudoWeakRef","parent","_$disconnectableChildren","delete","__pauser","Pauser","h","find","_$parent","noChange","getDirectiveClass","_$resolve","part","classInfo","strings","Promise","__values","props","weakThis","render","__weakThis","insertPart","_promise","newParent","_$startNode","refNode","Set","i","refPart","args","addDisconnectableToParent","_staticClasses","container","notifyChildPartConnectedChanged","join","isClearingValue","split","endNode","insertBefore","_$committedValue","ChildPart","previousValues","containerPart","size","_infinity","_$endNode","isArray","add","length","pauser","_this","deref","notifyChildrenConnectedChanged","_$notifyConnectionChanged","_previousClasses","index","_$isConnected","classList","installDisconnectAPI","newConnectionState","parentChanged","start","_$reparentDisconnectables","n","Directive","has","disconnected","disconnect","directiveParent","attributeIndex","super","reconnected","setCommittedValue","getCommittedValue","removePart","resume","_$clear","isClearingDirective","directive","setValue","isSingleExpression","__part","_$setValue","newValues","__attributeIndex"],"mappings":"sOK8FEQ,KAAAA,iBACWO,EAAAA,gBAAAA,UACF,yBA4GL,SAAUwC,EAASnD,CAAAA,EACvB,MAAO,CACLuB,EAIAc,IAO2B,UAAA,OAAlBA,EACHe,MA1GRtC,EAAAA,SAGME,KAAAA,CAAAA,CAAAA,SAAAA,CAAAA,CAAAA,CAAAA,uCAa8CY,GAUpD,GAAA,KATmBG,IAAfC,GACFC,WAAAA,mBAAAA,CAA+Bb,GAAAA,CAAIQ,EAAAA,EAAAA,IAAAA,KAExB,WAAA,GAAA,CAAA,CAAA,EAAA,OACMc,MAAAA,CAAO1C,EAAAA,CAAAA,CAAAA,OAAAA,CAAAA,EACN,EAAA,EAEToB,GAAAA,CAAAA,EAAYf,IAAAA,CAAML,GAEhB,aAATgB,EAAqB,KAIjBX,KAACA,CAAAA,CAAAA,CAAQuC,EACf,MAAO,KACsBV,CAAAA,EACzB,IAAMW,EAAAA,EAEJ5B,CFQFA,EAAAA,CAAAA,IERMwB,CAAKpB,IAAAA,EACVP,EAAAA,GAAAA,CAAAA,IAAAA,CACCO,IAAAA,CACAa,GAEFb,IAAAA,CAAKyB,aAAAA,CAAczC,EAAMwC,EAAU7C,EACpC,EACD,IAAA+C,CAA4Bb,CAAAA,EAI1B,OAAA,KAHUH,IAANG,GACFb,IAAAA,CAAK2B,CAAAA,CAAiB3C,EAAAA,KAAM0B,EAAW/B,EAASkC,GAE3CA,CACR,CAAA,CAEJ,CAAM,GAAa,WAATlB,EAAmB,CAC5B,GAAA,CAAMX,KAACA,CAAAA,CAAAA,CAAQuC,EACf,OAAO,SAAiCK,CAAAA,EACtC,IAAMJ,EAAWxB,IAAAA,CAAKhB,EAAAA,AACrBS,GAA8B2B,IAAAA,CAAKpB,IAAAA,CAAM4B,GAC1C5B,IAAAA,CAAKyB,aAAAA,CAAczC,EAAMwC,EAAU7C,EACrC,CACD,CACD,MAAUkD,MAAM,mCAAmClC,GAAO,EAkDhDhB,EACAuB,EAGAc,GAvJW,CAAA,CACrBrC,EACAqD,EACAhD,KAEA,IAAMiD,EAAiBD,EAAMC,cAAAA,CAAejD,GAO5C,OANCgD,EAAME,WAAAA,CAAuCC,cAAAA,CAAenD,EAAML,GAM5DsD,EACHvC,OAAO0C,wBAAAA,CAAyBJ,EAAOhD,GAAAA,KACvC0B,CAAS,CAAA,CA2IL2B,CACE1D,EACAuB,EACAc,EAIZ,8BC1LI/B,MAAAA,CAAO,aACI,iIIjCR,IAAM2D,EAAAA,AAAgBhB,GAAaA,GAASiB,EAAAA,OAAAA,uE,I,E,C,C,C,A,C,S,E,I,E,K,C,C,C,C,E,C,uB,E,C,C,C,A,C,I,C,G,E,A,C,C,A,C,A,C,I,I,A,C,C,C,A,C,C,A,A,C,K,O,E,A,C,K,Q,E,G,C;;;;;;C,C,K,E,Q,E,M,mB,C,+R,I,E,K,C,O,C,E,U,C,M,E,C,O,I,C,K,C,O,C,C;wB,I,C,a,C;mB,I,C,Q,C;oB,I,C,S,C;mB,I,C,Q,C;qB,I,C,U,C;qB,I,C,U,C;yB,I,C,c,C;oB,I,C,S,E,C,kB,E,I,C,S,C,C,C,C;iB,I,C,M,E,C,kB,E,I,C,M,C,C,C,C;a,I,C,G,E,C,kB,E,I,C,G,C,C,C,C;qB,I,C,O,E,E,Y,C,gB,C,I,C,O,C,C,C,C;uB,I,C,O,E,E,Y,C,gB,C,I,C,O,C,C,C,C;wB,I,C,O,E,E,Y,C,gB,C,I,C,O,C,C,C,C;sB,I,C,O,E,E,Y,C,gB,C,I,C,O,C,C,C,C;oB,I,C,M,E,E,Y,C,gB,C,I,C,M,C,C,C,C;sB,I,C,M,E,E,Y,C,gB,C,I,C,M,C,C,C,C;uB,I,C,M,E,E,Y,C,gB,C,I,C,M,C,C,C,C;qB,I,C,M,E,E,Y,C,gB,C,I,C,M,C,C,C,C;K,C,A,E,I,C,a,C,A,C,A,E,E,M,C,C,E,W,C,E,C,A,E,C,G,E,Q,A,E,sC,C,E,I,E,Q,A,E,iC,C,E,I,E,Q,A,E,kC,C,E,I,E,Q,A,E,iC,C,E,C,C,E,E,Q,A,E,mC,C,E,I,E,Q,A,E,mC,C,E,C,C,E,E,Q,A,E,uC,C,E,I,E,Q,A,E,kC,C,E,I,E,Q,A,E,+B,C,E,I,E,Q,A,E,4B,C,E,I,E,Q,A,E,gC,C,E,I,E,Q,A,E,+B,C,E,E,G,C,E,a,A,E,U,C,E,O,C,yJIQnBC,EAAAA,IAAAA,6IIuBpB,4BAEH,EACPQ,QAAAA,KAqC2BE,GAC3B,CAAA,GAAA,IAAA,CAAA,CAEEG,gBAAqBH,qBA2BvB,YAAA,CAAA,CAAA,CAAA,YAIE,OAAOx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AAAA,CAAAA,IAAAA,CAAAA,KAAAA,GAGO,aAAA,MACFqF,IAAAA,CAAAA,SAAAA,CAAAA,IAAAA,EACLrF,IAAAA,CAAKqE,IAAAA,CAASuE,MAAAA,EACf,IMnFqB,EVGM,UAxBjB,CEFC,ADAA,iBDGJ,CAAA,KAAK,CAAG,IAAI,GAqBtB,CAAC,IAnBK,CAAA,CAAQ,CAAQ,CAAA,eACJ,CAAC,EAAK,EACtB,CAEA,AAFC,ESNI,ACDA,CDEA,ATOF,AURE,CVQD,ASRG,ACDA,CDEA,ACDA,AVQG,CAAA,CACR,CSPK,ACDA,EDAQ,ACDA,EDCE,ACDA,CDEL,CTOH,AUVQ,ADCA,CAEH,CCHK,AAEJ,ADDI,EACI,ACDA,AVSV,CAAC,CSTS,ACDA,CDGH,CCHK,ADCA,EAEL,CTOA,GUVW,AVUR,ASTQ,CTSP,EACxB,CAD2B,AAC1B,AAED,CSZoC,ACDA,AVUR,CSTQ,ATSR,ASLvB,ACDA,AAJ+B,CAM/B,AVOF,ASPE,CTOD,AUTG,ADCA,CCJmC,ADCA,AAInC,ACAA,AVOG,CAAA,AUZgC,ADCA,CTYxC,CSNK,ICDI,CDDO,CAH2B,ATWpC,CURW,ADAA,ACFF,ADD2B,ECGvB,AAFF,CVUX,ASTY,CTSP,CSTS,CCH6B,ADMhC,CCNgC,CDM9B,ACJI,AAEE,CVQT,CAAC,CSRW,AADF,EACI,ATQV,CAAA,KSRgB,MTW1B,CAAA,KACP,CAAA,EUd8C,CAAA,EVcxC,ASb2C,CTa1C,ASb0C,CAOvC,GCN8C,CAAA,CVY3C,CSZ8C,ATY7C,CSZ6C,CAMzC,CTMD,CAAC,CAAA,GSNM,CAAC,CTS1B,iBACa,CSNG,GTQtB,GSZyD,gBAJ1D,EAAO,CCDA,ADCA,CAAA,CAAA,CAAA;;;;;;;;;;;;;;;;;;;CRaN,CAAA,0UQVD,IAAM,ETME,CSLN,CTKM,ESLH,CAAE,SAAY,CAAC,MAAA,EAAA,CAAA,CAAA,OAAA,CAAuC,CAAC,AAAC,MAAM,YACrD,SAAY,AAAC,OAAM,EAAO,CCCgB,ADDhB,CCCgB,ADDhB,EAAD,CAAC,IAAA,CAAkC,CAAE,AAAD,OAAF,MAAgB,mBACpE,KAAK,CCEsB,CAAA,EDFlB,AAC1B,CAAC,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CAAA,CAAE,CAAC,CAAE,GAC9B,CAAC,AADiC,CACjC,CDJM,IAAI,EAAE,GAAA,ECIC,GDJO,CCIH,CAAC,IDJQ,CCIH,CAAA,CAAE,ADLqC,CCKpC,EAAE,EAE7B,CAAA,CAFiC,AAEhC,IDLS,IAAI,EAAE,KAAA,ECKG,ADNmC,CAC9B,GCKD,CAAC,EDLM,CAAC,MCKE,CAAA,CAAE,CAAC,GAAE,IAAI,CAAC,SAAS,CAAC,CAQvD,AARwD,CAAC,CDLK,KCQ9D,CAHgE,GAG5D,CAAA,CAHiE,IAG3D,CAAC,CDNG,IAAI,ECMA,CAAG,CAAA,IDNO,MAAM,CAAC,+BAA+B;uBCO/C,CDND,GCMK,CAAC,EDNA,GCMK,CAAA,IDNG,MAAM,CAAC,oCAAoC;uCCOxC,IAAI,CAAC,CDND,ICMM,CAAA,+BDN8B;KCO1E,CAAA,AAEM,CDPG,CAAA,ICOC,CAAA,EDRF,AACQ,IAAI,EAAE,IAAA,ECOG,EDPK,ACOI,GAAQ,EDPN,ACOH,EAAQ,CAAC,GAAA,CAAU,CAAA,EAzBhC,EAAA,MAAM,CAAG,CDqBpB,ACrBqB,EDqBjB,AAAE,EAAA,AAHyD,SClB/B,CDqBlB,ACrBoB,EAAjB,CAAwB,AAGlC,EDkBa,AClBb,CAHiC,ADqBnB,GClBhC,EDoBM,KAAA,GAAA,ACpBE,SDkBmD,0BChBzC,EAAA,IAAlB,EDsBK,IAAA,IAAA,iCCpBa,EAAA,cAAV,EDwBC,ACxBC,+BAEQ,EAAA,CAAlB,CAAA,EAAA,EAAA,QAAA,AAAQ,CDyBA,CCzBE,mCAVA,EAAO,EDqCV,CCtCT,CAAA,EAAA,EDuCU,GAAA,UAAA,ACvCG,EAAC,EDuCG,IAAI,EAAE,KCtCX,yE,E,C,C,C,A,C,Q,C,C,C,A,C,G,E,M,K,C,S,E,C,C,C,A,C,Q,E,A,C,C,A,C,A,C,G,M,E,C,E,A,C,E,G,Q,E,G,C;;;;;;;;;;;;;;;C,C,0U,I,E,M,A,Q,A,E,U,C,a,qB,I,C,G,C,qB,C,A,I,C,G,C,O,C,A,I,C,I,M,C,C,A,M,C,C,A,C,O,I,C,K,C,O,C,C;uB,I,C,I,C,A,C,A,oB,E,I,C,I,C,E,C,C,A,C,K,C;wB,I,C,I,C,A,C,A,oB,E,I,C,I,C,E,C,C,A,C,K,C;O,C,A,E,I,C,S,E,I,C,G,C,K,E,I,C,G,C,Q,E,I,C,gB,C,G,C,A,C,A,A,gB,E,C,I,C,a,C,I,W,C,a,C,C,O,E,E,E,M,E,C,C,C,C,A,A,C,A,E,E,M,C,C,E,W,C,E,W,C,E,C,A,E,C,G,E,Q,A,E,4B,C,E,I,E,Q,A,E,4B,C,E,I,E,Q,A,E,6B,C,E,E,I,A,E,a,A,E,W,C,E,Q,C,8C,I,E,C,C,C,A,C,S,E,I,E,K,C,C,C,C,E,C,uB,E,C,C,Q,I,E,C,C,C,A,C,Q,E,C,C,A,C,A,C,A,W,C,C,C,A,C,I,C,Q,E,G,C;;;;;;;;;;;;;;;;;;;;;;C,C,0U,I,E,M,E,M,E,A,U,C,a,qB,I,C,I,C,I,C,A,I,C,e,C,Y,C,A,I,C,S,C,Y,C,A,I,C,U,C,a,C,A,I,C,M,E,E,G,C,A,C,W,C,kB,C,A,I,C,I,C,M,A,C,A,A,M,E,C,I,E,I,C,C,O,E,I,C,I,C,A,E,E,E,C,E,I,C,I,C,E,E,E,C,E,I,C,I,C,E,I,E,C,E,I,C,U,C,E,A,M,E,C,M,C,U,C,E,W,C,G,I,C,e,E,G,K,C,O,G,I,C,e,E,G,A,K,C,K,O,C,e,E,G,K,C,O,G,I,C,e,E,E,E,C,G,C,C,O,I,E,I,C,e,C,C,C,C,A,O,E,E,C,Q,E,C,C,U,E,I,C,e,C,C,C,C,A,I,E,A,C,C,C,U,S,E,I,C,e,C,E,A,C,C,I,C,K,C,O,C,C;2B,E,a;yB,G,E,C,G,C,A,C,A,C,A,C,A,C,A,E,C,C,C,A,C,A,C,I,C,A;wD,A,E,E,C,C,C,C,A,C,C,E,A,C,A,C,A,A,C,I,C,A;+C,I,C,I,C;yB,A,kB,C,C,K,C,W,C,C,G,C,C,A,C,A,G,C,C,O,E,I,C,M,C,A,C,A,M,E,I,C,W,C,C,C,C,A,C,A,W,C,C;I,C,A,E,I,C,iB,E,I,C,S,C,M,E,E,M,E,I,C,I,C,a,C,A,C,A,E,E,M,C,C,E,W,C,E,a,C,E,C,A,E,C,G,E,Q,A,E,6B,C,E,I,E,Q,A,E,wC,C,E,I,E,Q,A,E,kC,C,E,I,E,Q,A,E,iC,C,E,I,E,Q,A,E,mC,C,E,C,C,E,E,Q,A,E,C,I,C,O,C,C,8B,C,E,I,E,Q,A,E,oC,C,E,I,E,Q,A,E,6B,C,E,E,I,E,A,a,A,E,c,C,E,U,C,gC,E,C,C,oD,I,E,C,C,C,A,C,O,C,C,C,C,C,G,K,I,E,C,C,C,A,C,I,A,C,A,G,E,A,C,C,A,C,A,C,I,Q,E,A,C,K,Q,E,G,C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;C,C,0U,I,E,I,E,M,E,E,U,C,a,qB,I,C,O,C,M,C,A,I,C,I,C,I,A,C,A,A,M,E,C,I,C,O,C,O,C,C,G,C,O,C,A,I,C,O,C,I,C,C,G,C,I,C,A,I,E,I,C,C,C,E,E,C,I,C,U,C,A,C,U,C,A,O,E,I,C;+B,I,C,O,C,S,E,E,S;;;K,A,C,A,E,E,M,C,C,E,W,C,E,C,A,E,C,G,E,Q,A,E,gC,C,E,I,E,Q,A,E,6B,C,E,E,E,E,E,a,A,E,S,C,E,M,C,6B,E,C,C,C,C,qD,E,C,C,oD,I,E,C,C,C,A,C,O,C,C,C,C,C,C,A,C,C,G,C,G,E,A,C,C,A,C,A,C,I,E,C,K,E,A,C,K,Q,E,G,C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;C,C,0U,I,E,M,Q,C,C,O,G,C,a,qB,I,C,K,C,Y,C,A,I,C,I,C,I,A,C,A,A,M,E,C,O,I,C,K,C,O,C,C,e,E,S,C,C,C,I,C,K,C,S,C,A,C,A,gB,E,I,C,K,C,C,C,C,C,C,A,I,C,O,C,I,C,C,G,C,I,C,A,E,I,C;;W,A,C,A,E,E,M,C,C,E,W,C,E,C,A,E,C,G,E,Q,A,E,8B,C,E,I,E,Q,A,E,6B,C,E,E,I,E,O,M,A,E,qB,C,E,iB,C,A,E,C,C","ignoreList":[0,1,2,3,4,5,6,7,8,9,10,14,15,16,17,18,19]}